# baseURI: https://data.elsevier.com/lifescience/schema/rdbs
# imports: http://datashapes.org/dash
# imports: http://topbraid.org/tosh

@prefix dash: <http://datashapes.org/dash#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdbs: <https://data.elsevier.com/lifescience/schema/rdbs/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<https://data.elsevier.com/lifescience/schema/rdbs>
  a owl:Ontology ;
  rdfs:comment "Ontology for Relational Database System. Reworked from RDBS-OWL" ;
  owl:imports <http://datashapes.org/dash> ;
  owl:imports <http://topbraid.org/tosh> ;
  sh:declare [
      sh:namespace "http://www.w3.org/2000/01/rdf-schema#"^^xsd:anyURI ;
      sh:prefix "rdfs" ;
    ] ;
  sh:declare [
      sh:namespace "http://www.w3.org/2002/07/owl#"^^xsd:anyURI ;
      sh:prefix "owl" ;
    ] ;
  sh:declare [
      sh:namespace "https://data.elsevier.com/lifescience/schema/rdbs/"^^xsd:anyURI ;
      sh:prefix "rdbs" ;
    ] ;
.
rdbs:Aggregate
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Aggregate operation for Topologies."@en ;
  rdfs:label "Aggregate"@en ;
  rdfs:subClassOf rdbs:TopologyOperation ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAlias ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      sh:name "has alias" ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasCollect ;
      sh:class rdbs:Collect ;
      sh:minCount 1 ;
      sh:name "has collect" ;
      sh:node rdbs:Collect ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasGroupBy ;
      sh:class rdbs:GroupBy ;
      sh:minCount 1 ;
      sh:name "has group by" ;
      sh:node rdbs:GroupBy ;
      sh:nodeKind sh:IRI ;
    ] ;
.
rdbs:Alignment
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Alignment" ;
  rdfs:subClassOf owl:Thing ;
.
rdbs:AnnotationRelationIdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the id of relations between a source Vertice and a target Vertice of an Annotation."@en ;
  rdfs:label "Annotation Relation Vertice Id Column"@en ;
  rdfs:subClassOf rdbs:IdColumn ;
.
rdbs:AnnotationSourceVerticeIdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the id of the source Vertice of an Annotation."@en ;
  rdfs:label "Annotation Source Vertice Id Column"@en ;
  rdfs:subClassOf rdbs:IdColumn ;
.
rdbs:AnnotationTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Table containing Annotations i.e information between a source Vertice and a target Vertice and their relation."@en ;
  rdfs:label "Annotation Table"@en ;
  rdfs:subClassOf rdbs:GraphTable ;
.
rdbs:AnnotationTargetVerticeIdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the id of the target Vertice of an Annotation."@en ;
  rdfs:label "Annotation Target Vertice Id Column"@en ;
  rdfs:subClassOf rdbs:IdColumn ;
.
rdbs:AnnotationType
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Type of Annotation in the Schema of a Graph"@en ;
  rdfs:label "Annotation Type"@en ;
  rdfs:subClassOf rdbs:GraphSchemaType ;
.
rdbs:AnnotationTypeAssociation
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "An Annotation Type Schema Association associates exactly one Source of Type Vertice, and exactly one Target of Type Vertice through a relation of Type Annotation, for an Ontology"@en ;
  rdfs:label "Annotation Type Association"@en ;
  rdfs:subClassOf rdbs:GraphSchemaTypeAssociation ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAnnotationSourceType ;
      sh:class rdbs:VerticeType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has Annotation Source Type"@en ;
      sh:node rdbs:VerticeType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAnnotationTargetType ;
      sh:class rdbs:VerticeType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has Annotation Target Type"@en ;
      sh:node rdbs:VerticeType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAnnotationType ;
      sh:class rdbs:AnnotationType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has Annotation Type"@en ;
      sh:node rdbs:AnnotationType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasOntology ;
      sh:class rdbs:Ontology ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has Ontology"@en ;
      sh:node rdbs:Ontology ;
      sh:nodeKind sh:IRI ;
    ] ;
.
rdbs:Association
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Association" ;
  rdfs:subClassOf owl:Thing ;
.
rdbs:AttributeDataType
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "DataType of AttributeType in the Schema of a Graph"@en ;
  rdfs:label "Attribute Data Type"@en ;
  rdfs:subClassOf rdbs:GraphSchemaType ;
.
rdbs:AttributeIdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the id of an Attribute of the Property Graph."@en ;
  rdfs:label "Attribute Id Column"@en ;
  rdfs:subClassOf rdbs:IdColumn ;
.
rdbs:AttributeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that identify attributes in a Graph and the Graph Object (i.e. Vertice or Edges) to which the attribute belong"@en ;
  rdfs:label "AttributeTable"@en ;
  rdfs:subClassOf rdbs:GraphTable ;
.
rdbs:AttributeType
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Type of Attribute in the Schema of a Graph"@en ;
  rdfs:label "Attribute Type"@en ;
  rdfs:subClassOf rdbs:GraphSchemaType ;
.
rdbs:AttributeTypeColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the name of the Attribute Types of the Property Graph."@en ;
  rdfs:label "Attribute Type Column"@en ;
  rdfs:subClassOf rdbs:ValueColumn ;
.
rdbs:AttributeTypeIdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the id of an Attribute Type of the Property Graph."@en ;
  rdfs:label "Attribute Type Id Column"@en ;
  rdfs:subClassOf rdbs:IdColumn ;
.
rdbs:AttributeTypeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that contains the Type of the Attributes of the Property Graph."@en ;
  rdfs:label "Attribute Type Table"@en ;
  rdfs:subClassOf rdbs:TypeTable ;
.
rdbs:AttributeWithType
  a sh:SPARQLRule ;
  rdfs:comment "Creating the description of a Temporary Table containing the attributes of a property graph and their associated classes."@en ;
  rdfs:label "AttributeWithType"@en ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
# The base node to describe topologies of temporary topics
	?topology a rdbs:Topology ;
			rdbs:hasOutput ?output ;
			rdbs:hasTopic ?origin ;
			rdbs:hasJoin ?join .
# The description of the join element of the topology
    ?join a rdbs:Join ;
			rdbs:hasTopic ?foreign_topic ;
			rdbs:hasForeignKey ?fk  ;
			rdbs:hasKind rdbs:InnerJoin ;
			rdbs:hasSelect ?select .
# The description of the select element of the join
	?select a rdbs:Select ;
		rdbs:hasValue ?selected_property_label .
# The description of the table or topic resulting from the join
	?table a ?output_type ;
			rdbs:createdFrom ?topology ;
			rdfs:label ?output ;
# Adding the copies of the origin topic columns and the selected foreign topic columns
			rdbs:hasColumn ?copied_origin_column ;
			rdbs:hasColumn ?copied_foreign_column .
# Set up copies of the origin columns
	?copied_origin_column rdbs:belongsToTable ?table ;
		?origin_predicate ?origin_object .
# Set up copies of the foreign columns
	?copied_foreign_column rdbs:belongsToTable ?table ;
		?foreign_predicate ?foreign_object .
}
WHERE {
# Define the valid object types to match
	VALUES (?origin_type ?output_type) {
		( rdbs:EdgeAttributeTable rdbs:EdgeAttributeWithTypeTable )
		( rdbs:VerticeAttributeTable rdbs:VerticeAttributeWithTypeTable )
	}
# Pattern to match in order to create join topology
    ?this a ?origin_type ;
		rdbs:hasColumn ?foreign_key_column .
# Create the new description table and its name as the output
	BIND(rdbs:mintGraphTemporaryDescriptionTable(?this, rdbs:AttributeWithTypeTable) AS ?output) .
	BIND(rdbs:createIRIFromString(?output, \"base\") AS ?table) .
# Filter topologies already processed
	FILTER NOT EXISTS { ?table a ?output_type }
# Identify target foreign column
	?foreign_key_column	a rdbs:AttributeTypeIdColumn .
	?foreign_table a rdbs:AttributeTypeTable ;
		rdbs:hasColumn ?selected_property .
	?selected_property a rdbs:AttributeTypeColumn .
# Find the different columns of the origin topic 
	?this rdfs:label ?origin ;
		rdbs:hasColumn ?origin_column ;
		rdbs:hasColumn ?object_column .
# Get the different objects for the predicates of our constructed nodes
	?foreign_key_column rdfs:label ?fk .
	?foreign_table rdfs:label ?foreign_topic .
	?selected_property rdfs:label ?selected_property_label .
# Get the predicates and objects of the copied columns
	?origin_column ?origin_predicate ?origin_object .
	?selected_property ?foreign_predicate ?foreign_object .
# Skip the predicates referencing the belonging of the columns
	FILTER (?origin_predicate != rdbs:belongsToTable )
	FILTER (?foreign_predicate != rdbs:belongsToTable )
# Create the different subject nodes for each matched Pattern
	BIND ( rdbs:mintTopologyJoin(?output) AS ?topology) .
	BIND ( rdbs:mintTopologyJoin(?output, ?foreign_topic) AS ?join) .
	BIND ( rdbs:mintTopologyJoin(?output, ?foreign_topic, ?selected_property_label) AS ?select) .
# Create the different columns that are copies of the origin columns
	BIND (rdbs:mintCopyOfColumn(?origin_column, ?table) AS ?copied_origin_column) .
# Create the different columns that are copies of the foreign columns
	BIND (rdbs:mintCopyOfColumn(?selected_property, ?table) AS ?copied_foreign_column) .
}""" ;
  sh:deactivated false ;
  sh:order "2"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:AttributeWithTypeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Description Table containing the Attributes of the Property Graph Objects and their associated Attribute Types."@en ;
  rdfs:label "Attribute With Type Table"@en ;
  rdfs:subClassOf rdbs:TemporaryTable ;
.
rdbs:BOOLEAN
  a rdbs:DataType ;
  rdfs:label "BOOLEAN" ;
.
rdbs:CLOB
  a rdbs:DataType ;
  rdfs:label "CLOB" ;
.
rdbs:ClassifyingColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:subClassOf rdbs:Column ;
.
rdbs:Collect
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Collect operation for Topologies."@en ;
  rdfs:label "Collect"@en ;
  rdfs:subClassOf rdbs:TopologyOperation ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasClassifier ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has classifier" ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasValue ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
    ] ;
.
rdbs:Column
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column is the field of a table line type."@en ;
  rdfs:label "Column"@en ;
  rdfs:subClassOf owl:Thing ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdfs:label ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:belongsToTable ;
      sh:class rdbs:Table ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "belongs to table" ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasDataType ;
      sh:class rdbs:DataType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "defined by data type" ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:isNullable ;
      sh:datatype xsd:boolean ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "is nullable" ;
    ] ;
.
rdbs:ContaineeEdgeIdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the id of the Contained Edge of a Membership."@en ;
  rdfs:label "Containee Edge Id Column"@en ;
  rdfs:subClassOf rdbs:IdColumn ;
.
rdbs:ContaineeEdgeType
  a owl:ObjectProperty ;
  rdfs:label "Containee Edge Type"@en ;
  rdfs:subPropertyOf rdbs:hasParticipantType ;
.
rdbs:ContaineeVerticeIdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the id of the Contained Vertice of a Membership."@en ;
  rdfs:label "Containee Vertice Id Column"@en ;
  rdfs:subClassOf rdbs:IdColumn ;
.
rdbs:ContaineeVerticeType
  a owl:ObjectProperty ;
  rdfs:label "Containee Vertice Type"@en ;
  rdfs:subPropertyOf rdbs:hasParticipantType ;
.
rdbs:ContainerVerticeIdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the id of the Containing Vertice of a Membership."@en ;
  rdfs:label "Container Vertice Id Column"@en ;
  rdfs:subClassOf rdbs:IdColumn ;
.
rdbs:ContainerVerticeType
  a owl:ObjectProperty ;
  rdfs:label "Container Vertice Type"@en ;
  rdfs:subPropertyOf rdbs:hasParticipantType ;
.
rdbs:CreateAlignmentForGraphDataTypeProperties
  a sh:SPARQLRule ;
  rdfs:label "Map a Data Type Property to its Column." ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
 ?alignment a rdbs:Alignment ;
	rdbs:topic ?table_label ;
	rdbs:field ?column_label ;
	rdbs:datatype ?data_type ;	
	rdbs:uri ?property ;
# DEPRECATED
	rdbs:atype \"DTP\" .
}
WHERE {
	?this a rdbs:GraphCBE ;
		rdfs:label ?table_label ;
		rdbs:hasColumn ?column .
	?column rdfs:label ?column_label ;
		rdbs:hasDataType ?data_type .
	?property a owl:DatatypeProperty ;
		rdbs:mapsToColumn ?column .
	BIND (rdbs:mintGraphAlignment(?this, ?column) AS ?alignment)
}""" ;
  sh:deactivated true ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:CreateAlignmentForGraphObjectProperties
  a sh:SPARQLRule ;
  rdfs:label "Map an Object Property to its Column." ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
 ?alignment a rdbs:Alignment ;
	rdbs:topic ?table_label ;
	rdbs:field ?column_label ;
	rdbs:targetClass ?target_class ;
	rdbs:uri ?property ;
# DEPRECATED
	rdbs:atype \"OTP\" .
}
WHERE {
	?this a rdbs:GraphCBE ;
		rdfs:label ?table_label ;
		rdbs:hasColumn ?column .
	?column rdfs:label ?column_label .
	?property a owl:ObjectProperty ;
		rdfs:range ?target_class ;
		rdbs:mapsToColumn ?column .
	BIND (rdbs:mintGraphAlignment(?this, ?column) AS ?alignment)
}""" ;
  sh:deactivated true ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:CreateAlignmentForManyToManyWithoutClassifier
  a sh:SPARQLRule ;
  rdfs:label "Map an Object property from a many to many relationship." ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT{
  ?alignment a rdbs:Alignment ;
      rdbs:atype \"OTP\" ;
      rdbs:topic ?origin ;
      rdbs:field ?ascollect ;
      rdbs:targetClass ?range ;
      rdbs:uri ?puri ;
      rdbs:generatedBy rdbs:CreateAlignmentForManyToManyWithoutClassifier ;
      .
}
WHERE {
   $this      rdbs:topic ?origin ;
      rdbs:relation ?relation ;
      rdbs:groupby ?groupby ;
      rdbs:collect [
          rdbs:value ?collect ;
          rdbs:as ?ascollect ;
          rdbs:extendTable ?domaint ;
          rdbs:withValuesFromTable ?ranget ;
          rdbs:property ?puri ;
      ].

   FILTER NOT EXISTS { $this rdbs:classifier []}
   BIND( BNODE() AS ?alignment)
}
""" ;
  sh:deactivated false ;
  sh:order "2"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:CreateAlignmentForTableColumns
  a sh:SPARQLRule ;
  rdfs:label "Map an datatype property from an entity table." ;
  sh:condition rdbs:EntityTable ;
  sh:condition rdbs:TaxonomyTable ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT{
  ?alignment a rdbs:Alignment ;
      rdbs:atype \"DTP\" ;
      rdbs:topic ?topic ;
      rdbs:field ?field ;
      rdbs:datatype ?dt ;
      rdbs:uri ?puri ;
      rdbs:generatedBy rdbs:CreateAlignmentForTableColumns ;
      .
}
WHERE {
  $this rdbs:hasColumn ?column;
        rdfs:label ?topic.
  ?column a rdbs:Column ;
      rdbs:hasDataType ?dt ;
      rdfs:label ?field.
  ?puri rdbs:mapsToColumn ?column .
  BIND( BNODE() AS ?alignment)
}
""" ;
  sh:deactivated false ;
  sh:order "2"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:CreateAlignmentForTableFKColumns
  a sh:SPARQLRule ;
  rdfs:label "Map an object property from an entity table." ;
  sh:condition rdbs:EntityTable ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT{
  ?alignment a rdbs:Alignment ;
      rdbs:topic ?topic ;
      rdbs:atype \"OTP\" ;
      rdbs:field ?field ;
      rdbs:targetClass ?target ;
      rdbs:uri ?puri ;
      rdbs:generatedBy rdbs:CreateAlignmentForTableFKColumns ;
      .
}
WHERE {
  $this      rdbs:hasColumn ?column;
        rdfs:label ?topic.
  ?column a rdbs:ForeignKeyColumn;
      rdfs:label ?field.
  ?puri rdbs:mapsToColumn ?column ;
        rdfs:range ?target .
  BIND( BNODE() AS ?alignment)
}
""" ;
  sh:deactivated false ;
  sh:order "2"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:CreateAlignmentForTableInverseFKColumns
  a sh:SPARQLRule ;
  rdfs:label "Map an object property from a foreign key to an entity table." ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT{
  ?alignment a rdbs:Alignment ;
      rdbs:atype \"OTP\" ;
      rdbs:topic ?topic ;
      rdbs:field ?field ;
      rdbs:targetClass ?target ;
      rdbs:uri ?puri ;
      rdbs:generatedBy rdbs:CreateAlignmentForTableInverseFKColumns ;
      .
}
WHERE {

  $this        rdbs:topic ?topic ;
        rdbs:relation ?targetTable ;
        rdbs:collect [
          rdbs:as ?field ;
          rdbs:extendTable ?entity
        ].
   ?puri rdfs:range ?target ;
        rdfs:domain ?origin;
        .
  ?origin rdbs:fromTable ?entity.
  ?target rdbs:fromTable [rdfs:label ?targetTable].

  BIND( BNODE() AS ?alignment)
}
""" ;
  sh:deactivated false ;
  sh:order "2"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:CreateClassifierValuePlaceholder
  a sh:SPARQLRule ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
	?this rdbs:hasDistinctValue ?value .
}
WHERE {
	?this a rdbs:ClassifyingColumn ;
		rdfs:label ?column ;
		rdbs:belongsToTable ?table .
	FILTER NOT EXISTS { ?this rdbs:hasDistinctValue ?value}
	{
		?table a rdbs:AttributeWithTypeWithIdObjectTable ;
			rdbs:hasColumn [
				rdfs:label ?value_label ;
				a rdbs:ValueColumn ;
					rdbs:isCopyOf [
						rdbs:belongsToTable [
							a rdbs:TypeTable 
						]
					]
			]
	} UNION {
		?table a rdbs:ObjectWithTypeTable ;
			rdfs:label ?table_label .
		BIND(REPLACE(?table_label, \"-with-types\", \"\") AS ?value_label) .
	}
	VALUES (?var) {
			(\"value_1\")
			(\"value_2\")
			(\"value_3\")
		}
	BIND(CONCAT(?value_label, \"_\", ?var) AS ?value)
}""" ;
  sh:deactivated true ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:DATE
  a rdbs:DataType ;
  rdfs:label "DATE" ;
.
rdbs:DATETIME
  a rdbs:DataType ;
  rdfs:label "DATETIME" ;
.
rdbs:DOUBLE
  a rdbs:DataType ;
  rdfs:label "DOUBLE" ;
.
rdbs:DataColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column mapping to a DataType Property of the Graph Ontology."@en ;
  rdfs:label "Data Column"@en ;
  rdfs:subClassOf rdbs:Column ;
.
rdbs:DataType
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Collection of primitive and atomic values."@en ;
  rdfs:label "Data type"@en ;
  rdfs:subClassOf owl:Thing ;
.
rdbs:DictionaryIdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the id of a Dictionary Value of the Property Graph."@en ;
  rdfs:label "Dictionary Id Column"@en ;
  rdfs:subClassOf rdbs:IdColumn ;
.
rdbs:DictionaryTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that identifies the Dictionary values and their relations in the Property Graph Abstraction."@en ;
  rdfs:label "Dictionary Table"@en ;
  rdfs:subClassOf rdbs:GraphTable ;
.
rdbs:DictionaryValueColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the Dictionary Values of the Property Graph."@en ;
  rdfs:label "Dictionary Value Column"@en ;
  rdfs:subClassOf rdbs:ValueColumn ;
.
rdbs:DiscardedColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Instances of this class shall be discarded by the analysis and import process."@en ;
  rdfs:label "Discarded column"@en ;
  rdfs:subClassOf rdbs:Column ;
.
rdbs:DiscardedTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Instances of this class shall be discarded from the analysis and import."@en ;
  rdfs:label "Discarded table"@en ;
  rdfs:subClassOf rdbs:Table ;
.
rdbs:EdgeAttributeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that identify attributes in a Graph and the Graph Edge to which the attribute belong"@en ;
  rdfs:label "Edge Attribute Table"@en ;
  rdfs:subClassOf rdbs:AttributeTable ;
.
rdbs:EdgeAttributeTypeAssociation
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Edge Attribute Type Schema Association associates one Edge Attribute Type with an AttributeData"@en ;
  rdfs:label "Edge Attribute Type Association"@en ;
  rdfs:subClassOf rdbs:GraphSchemaTypeAssociation ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAttributeDataType ;
      sh:class rdbs:AttributeDataType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has attribute data type {@en}" ;
      sh:node rdbs:AttributeDataType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAttributeType ;
      sh:class rdbs:AttributeType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has attribute type {@en}" ;
      sh:node rdbs:AttributeType ;
      sh:nodeKind sh:IRI ;
    ] ;
.
rdbs:EdgeAttributeWithTypeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Description Table containing the Attributes of the Property Graph Edges and their associated Attribute Types."@en ;
  rdfs:label "Edge Attribute With Type Table "@en ;
  rdfs:subClassOf rdbs:AttributeWithTypeTable ;
.
rdbs:EdgeBySource
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that represents a Concise Bounded Entity of an Edge of a given Source from the Property Graph."@en ;
  rdfs:label "Edge By Source"@en ;
  rdfs:subClassOf rdbs:GraphCBE ;
.
rdbs:EdgeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that represents an Edge of the Property Graph. It represents a relation between two Entities in the Property Graph Abstraction."@en ;
  rdfs:label "Edge Table"@en ;
  rdfs:subClassOf rdbs:ObjectTable ;
.
rdbs:EdgeType
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Type of Edge in the Schema of Graph"@en ;
  rdfs:label "Edge Type"@en ;
  rdfs:subClassOf rdbs:GraphSchemaType ;
.
rdbs:EdgeTypeAssociation
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Edge Type Schema Association associates an Edge Type, an AttributeType, an AttributeDataType and two Vertices Types A and B, through two respective Links of Types A and B"@en ;
  rdfs:label "Edge Type Association"@en ;
  rdfs:subClassOf rdbs:GraphSchemaTypeAssociation ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAttributeDataType ;
      sh:class rdbs:AttributeDataType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has attribute data type {@en}" ;
      sh:node rdbs:AttributeDataType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAttributeType ;
      sh:class rdbs:AttributeType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has attribute type {@en}" ;
      sh:node rdbs:AttributeType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasEdgeType ;
      sh:class rdbs:EdgeType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has edge type {@en}" ;
      sh:node rdbs:EdgeType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasVerticeALinkType ;
      sh:class rdbs:LinkType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has vertice A Link type {@en}" ;
      sh:node rdbs:LinkType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasVerticeAType ;
      sh:class rdbs:VerticeType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has vertice A Type {@en}" ;
      sh:node rdbs:VerticeType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasVerticeBLinkType ;
      sh:class rdbs:LinkType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has vertice B Link type {@en}" ;
      sh:node rdbs:LinkType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasVerticeBType ;
      sh:class rdbs:VerticeType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has vertice B Type {@en}" ;
      sh:node rdbs:VerticeType ;
      sh:nodeKind sh:IRI ;
    ] ;
.
rdbs:EdgeTypedAttributeValueTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that contains the Attribute Values of a specific AttributeDataType of an Edge Attribute of the Property Graph."@en ;
  rdfs:label "Edge Typed Attribute Value Table"@en ;
  rdfs:subClassOf rdbs:TypedAttributeValueTable ;
.
rdbs:EdgeWithTypeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Description Table containing the Edges of the Property Graph and their associated Object Types."@en ;
  rdfs:label "Edge With Type Table "@en ;
  rdfs:subClassOf rdbs:ObjectWithTypeTable ;
.
rdbs:EntityClassification
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Entity classification"@en ;
  rdfs:subClassOf owl:Thing ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasClassifyingColumn ;
      sh:class rdbs:Column ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has classifying column" ;
    ] ;
.
rdbs:EntityRelationKarmaAlignmentRulesShape
  a sh:NodeShape ;
  rdfs:label "Entity alignment shape generated from CBE Topology" ;
  rdfs:subClassOf rdbs:KarmaAlignmentRulesShape ;
  sh:order "2"^^xsd:decimal ;
  sh:rule rdbs:CreateAlignmentForManyToManyWithoutClassifier ;
  sh:rule rdbs:CreateAlignmentForTableColumns ;
  sh:rule rdbs:CreateAlignmentForTableFKColumns ;
  sh:rule rdbs:CreateAlignmentForTableInverseFKColumns ;
  sh:targetClass rdbs:EntityTable ;
  sh:targetClass rdbs:TaxonomyTable ;
.
rdbs:EntityRelationProxyOntologyRulesShape
  a sh:NodeShape ;
  rdfs:comment "Shape grouping all rules to generate Proxy ontology entities (e.g. concepts and properties) from a main artefact." ;
  rdfs:label "Entity concept shape" ;
  rdfs:subClassOf rdbs:ProxyOntologyRulesShape ;
  sh:order "1"^^xsd:decimal ;
  sh:rule rdbs:MapColumnToDatatypeProperty ;
  sh:rule rdbs:MapColumnToDatatypePropertyFromPropertyTable ;
  sh:rule rdbs:MapEntityClassifierToSubClass ;
  sh:rule rdbs:MapEntityTableToClass ;
  sh:rule rdbs:MapForeignKeyColumnFromPropertyTableToObjectProperty ;
  sh:rule rdbs:MapForeignKeyColumnToObjectProperty ;
  sh:rule rdbs:MapInverseForeignKeyColumnToObjectProperty ;
  sh:rule rdbs:MapManyToManyLinkToObjectProperty ;
  sh:rule rdbs:MapPropertyClassifierToSubProperty ;
  sh:targetClass rdbs:EntityTable ;
.
rdbs:EntityRelationTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Tables i.e. Tags of the Entity Relation Abstraction"@en ;
  rdfs:subClassOf rdbs:Table ;
.
rdbs:EntityRelationTagRulesShape
  a sh:NodeShape ;
  rdfs:comment "Automating the tagging of entity relationship database items "@en ;
  rdfs:label "Entity Relation Tag Rules Shape "@en ;
  rdfs:subClassOf rdbs:TagRulesShape ;
.
rdbs:EntityRelationTopologyRulesShape
  a sh:NodeShape ;
  rdfs:comment "Shape grouping all rules in the EntityRelation Abstraction to generate CBE Topology"@en ;
  rdfs:label "EntityRelationRulesShape"@en ;
  rdfs:subClassOf rdbs:TopologyRulesShape ;
  sh:order "0"^^xsd:decimal ;
  sh:rule rdbs:ManyToManyRelationship ;
  sh:rule rdbs:MergeTable ;
  sh:rule rdbs:OneToManyRelationship ;
  sh:targetClass rdbs:EntityTable ;
  sh:targetClass rdbs:PropertyTable ;
.
rdbs:EntityTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Table which will generate an entity type in the automated ingestion process."@en ;
  rdfs:label "Entity table"@en ;
  rdfs:subClassOf rdbs:EntityRelationTable ;
.
rdbs:FLOAT
  a rdbs:DataType ;
  rdfs:label "FLOAT" ;
.
rdbs:ForeignColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Look up a number of foreign columns, all belonging to a single table, and associate them to a target table."@en ;
  rdfs:label "Foreign column"@en ;
  rdfs:subClassOf rdbs:Column ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasForeignColumn ;
      sh:class rdbs:Column ;
      sh:minCount 1 ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:viaForeignKeyColumn ;
      sh:class rdbs:ForeignKeyColumn ;
      sh:name "has foreign key column" ;
      sh:nodeKind sh:IRI ;
    ] ;
.
rdbs:ForeignKeyColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column of a referencing table whose values must correspond to values of some primary key column in some referenced table."@en ;
  rdfs:label "Foreign key column"@en ;
  rdfs:subClassOf rdbs:Column ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:belongsToTable ;
      sh:class rdbs:Table ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:refersToPrimaryKey ;
      sh:class rdbs:PrimaryKeyColumn ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
    ] ;
.
rdbs:GraphCBE
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that represents a Concise Bounded Entity (Vertice or Edge) of the Property Graph with its different Attributes and relations."@en ;
  rdfs:label "Graph CBE"@en ;
  rdfs:subClassOf rdbs:GraphTable ;
.
rdbs:GraphKarmaAlignmentRulesShape
  a sh:NodeShape ;
  rdfs:subClassOf rdbs:KarmaAlignmentRulesShape ;
  sh:rule rdbs:CreateAlignmentForGraphDataTypeProperties ;
  sh:rule rdbs:CreateAlignmentForGraphObjectProperties ;
  sh:targetClass rdbs:GraphCBE ;
.
rdbs:GraphProxyOntologyRulesShape
  a sh:NodeShape ;
  rdfs:subClassOf rdbs:ProxyOntologyRulesShape ;
  sh:rule rdbs:MapGraphColumnToConstraintMultiple ;
  sh:rule rdbs:MapGraphColumnToConstraintOr ;
  sh:rule rdbs:MapGraphColumnToConstraintPath ;
  sh:rule rdbs:MapGraphColumnToDataTypeProperty ;
  sh:rule rdbs:MapGraphColumnToObjectProperty ;
  sh:rule rdbs:MapGraphTableToClass ;
  sh:targetClass rdbs:GraphCBE ;
.
rdbs:GraphSchemaType
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment """The Super Class of the Types that makes up (i.e. defines) the Schema of a Graph.
Note that it is assumed that the type of Graph for which we enable the description of their schema with this modeling, are those found in the Biochemistry domain. 
Hence we can find types like Annotation or ontology where people would mostly expect EdgeType or VerticeType"""@en ;
  rdfs:label "Graph Schema Type"@en ;
  rdfs:subClassOf owl:Thing ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdfs:label ;
      sh:datatype xsd:string ;
      sh:description "The Types must come imperatively with a label"@en ;
      sh:name "Type Label"@en ;
    ] ;
.
rdbs:GraphSchemaTypeAssociation
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Schema Description of a Type in a Graph Schema"@en ;
  rdfs:label "Graph Schema Type Association"@en ;
  rdfs:subClassOf owl:Thing ;
.
rdbs:GraphTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Tables i.e. Tags of the Graph Abstraction"@en ;
  rdfs:label "Graph Table"@en ;
  rdfs:subClassOf rdbs:Table ;
.
rdbs:GraphTagRulesShape
  a sh:NodeShape ;
  rdfs:comment "Automating the tagging of property graph database items "@en ;
  rdfs:label "Graph Tag Rules Shape "@en ;
  rdfs:subClassOf rdbs:TagRulesShape ;
  sh:rule rdbs:TagGenericIdColumns ;
  sh:targetClass owl:Ontology ;
.
rdbs:GraphTopologyRulesShape
  a sh:NodeShape ;
  rdfs:comment "Shape grouping all rules in the Graph Abstraction to generate CBE Topology"@en ;
  rdfs:label "GraphTopologyRulesShape"@en ;
  rdfs:subClassOf rdbs:TopologyRulesShape ;
  sh:order "1"^^xsd:decimal ;
  sh:rule rdbs:AttributeWithType ;
  sh:rule rdbs:ObjectWithType ;
  sh:rule rdbs:TypedAttributeValueWithTypeWithIdObject ;
  sh:rule rdbs:TypedAttributeValueWithTypeWithIdObjectWithDictionary ;
  sh:targetClass rdbs:EdgeAttributeTable ;
  sh:targetClass rdbs:EdgeAttributeWithTypeTable ;
  sh:targetClass rdbs:EdgeTable ;
  sh:targetClass rdbs:EdgeTypedAttributeValueTable ;
  sh:targetClass rdbs:TypedEdgeAttributeValueWithTypeWithIdObjectTable ;
  sh:targetClass rdbs:TypedVerticeAttributeValueWithTypeWithIdObjectTable ;
  sh:targetClass rdbs:VerticeAttributeTable ;
  sh:targetClass rdbs:VerticeAttributeWithTypeTable ;
  sh:targetClass rdbs:VerticeTable ;
  sh:targetClass rdbs:VerticeTypedAttributeValueTable ;
.
rdbs:GroupBy
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Group By operation for Topologies."@en ;
  rdfs:label "Group By"@en ;
  rdfs:subClassOf rdbs:TopologyOperation ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdfs:label ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasOrder ;
      sh:datatype xsd:integer ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has order" ;
    ] ;
.
rdbs:INT
  a rdbs:DataType ;
  rdfs:label "INT" ;
.
rdbs:IdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the identifier of an Object."@en ;
  rdfs:label "Id Column"@en ;
  rdfs:subClassOf rdbs:Column ;
.
rdbs:IndexValueColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the Index Values of the Property Graph."@en ;
  rdfs:label "Index Value Column"@en ;
  rdfs:subClassOf rdbs:ValueColumn ;
.
rdbs:InnerJoin
  a rdbs:JoinKind ;
  rdfs:comment "A SQL Inner Join."@en ;
  rdfs:label "InnerJoin"@en ;
.
rdbs:Join
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Join operation for Topologies."@en ;
  rdfs:label "Join"@en ;
  rdfs:subClassOf rdbs:TopologyOperation ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasForeignKey ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has foreign key" ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasKind ;
      sh:class rdbs:JoinKind ;
      sh:maxCount 1 ;
      sh:name "has kind" ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasSelect ;
      sh:class rdbs:Select ;
      sh:minCount 1 ;
      sh:name "has select" ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasTopic ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has topic" ;
    ] ;
.
rdbs:JoinKind
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Kind of SQL Join used in a Topology."@en ;
  rdfs:label "Join Kind"@en ;
  rdfs:subClassOf rdbs:DataType ;
.
rdbs:KarmaAlignmentRulesShape
  a sh:NodeShape ;
  rdfs:label "Karma alignment rules shape" ;
.
rdbs:LeftJoin
  a rdbs:JoinKind ;
  rdfs:comment "A SQL Left Join."@en ;
  rdfs:label "LeftJoin"@en ;
.
rdbs:LinkType
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Type of Link between a Vertex and an Edge in the Schema of a Graph"@en ;
  rdfs:label "Link Type"@en ;
  rdfs:subClassOf rdbs:GraphSchemaType ;
.
rdbs:LookupTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Lookup table"@en ;
  rdfs:subClassOf rdbs:EntityRelationTable ;
.
rdbs:ManyToManyRelationship
  a sh:SPARQLRule ;
  rdfs:label "Many to many symmetric relationship" ;
  sh:construct """
PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>

CONSTRUCT {
    ?topology a rdbs:Topology;
        rdbs:topic ?origin ;
        rdbs:relation ?relation ;
        rdbs:groupby ?groupby ;
        rdbs:classifier ?classifier ;
        rdbs:collect [
          rdbs:value ?collect ;
          rdbs:as ?relation ;
          rdbs:classifyingValuesFrom ?ccolumn ;
          rdbs:extendTable ?entity ;
          rdbs:withValuesFromTable ?oentity ;
        ];
    rdbs:generatedBy rdbs:ManyToManyRelationship ;
    .

}
WHERE {
    $this rdfs:label ?origin .
   ?oentity a ?oet .
   FILTER(?oet = rdbs:EntityTable || ?oet = rdbs:TaxonomyTable)
   ?link a rdbs:RelationshipTable; rdfs:label ?relation ; rdbs:hasColumn ?efk , ?tfk.
   FILTER(?efk != ?tfk)
   ?efk a rdbs:ForeignKeyColumn ;  rdbs:refersToPrimaryKey ?epk;  rdfs:label ?groupby.
   ?tfk a rdbs:ForeignKeyColumn  ;  rdbs:refersToPrimaryKey ?tpk ; rdfs:label ?collect.
   ?epk rdbs:belongsToTable $this.
   ?tpk rdbs:belongsToTable ?oentity.
  FILTER NOT EXISTS {
   $this rdbs:inhibitRelationTo ?oentity
  }
  OPTIONAL
  {
    ?pc a rdbs:PropertyClassification;
           rdbs:hasClassifyingTable $this ;
           rdbs:hasClassifyingColumn ?ccolumn.
    ?ccolumn  rdbs:belongsToTable ?link ;
              rdfs:label ?classifier .

  }
  BIND(BNODE() AS ?topology)
  BIND($this AS ?entity)
}""" ;
  sh:deactivated true ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapColumnToDatatypeProperty
  a sh:SPARQLRule ;
  rdfs:label "Map an Column in an Entity Table to an owl:DatatypeProperty" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
   ?puri a owl:DatatypeProperty ;
      rdfs:label ?cname ;
      rdfs:domain ?euri ;
      rdbs:mapsToColumn ?column .

  ?euri sh:property [
       a sh:PropertyShape ;
       sh:path ?puri ;
       sh:maxCount ?max ;
       sh:minCount ?min ;
       sh:nodeKind sh:Literal ;
  ].
}
WHERE {
  $this rdfs:label ?ename ;
      rdbs:hasColumn ?column.
    ?column a rdbs:Column ;
         rdfs:label ?cname;
         rdbs:isNullable ?nullable
    .
    OPTIONAL { $this rdbs:hasEntityLocalName ?lname.}
    OPTIONAL { ?column rdbs:hasPropertyLocalName ?plname.}

    rdbs:target sh:namespace ?namespace ; sh:prefix ?prefix.

    BIND(rdbs:mintEntityURI(?lname , ?ename , ?namespace) AS ?euri)
    BIND(rdbs:mintDTPropertyURI(?lname , ?ename ,?plname , ?cname , ?namespace) AS ?puri)

    BIND( IF(?nullable , 0, 1) AS ?min)
    BIND( 1 AS ?max)
}""" ;
  sh:deactivated false ;
  sh:order "1"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapColumnToDatatypePropertyFromPropertyTable
  a sh:SPARQLRule ;
  rdfs:label "Map an Column in an Entity Table to an owl:DatatypeProperty" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
   ?puri a owl:DatatypeProperty ;
      rdfs:label ?cname ;
      rdfs:domain ?euri ;
      rdbs:mapsToColumn ?column ;
      rdbs:generatedBy rdbs:MapColumnToDatatypePropertyFromPropertyTable;
      .

  ?euri sh:property [
       a sh:PropertyShape ;
       sh:path ?puri ;
       sh:maxCount ?max ;
       sh:minCount ?min ;
       sh:nodeKind sh:Literal ;
       rdbs:generatedBy rdbs:MapColumnToDatatypePropertyFromPropertyTable;
  ].
  ?alignment a rdbs:Alignment ;
        rdbs:atype \"DTP\" ;
        rdbs:topic ?ename ;
        rdbs:field ?fieldname ;
        rdbs:datatype ?dt ;
        rdbs:uri ?puri ;
        rdbs:generatedBy rdbs:MapColumnToDatatypePropertyFromPropertyTable ;
        .
  ?topology a rdbs:Topology;
          rdbs:topic ?origin ;
          rdbs:relation ?relation ;
          rdbs:groupby ?groupby ;
          rdbs:collect [
             rdbs:value ?cname ;
             rdbs:as ?fieldname ;
             rdbs:extendTable ?entity ;
             rdbs:property ?puri ;
          ]  ;
          rdbs:generatedBy rdbs:MapColumnToDatatypePropertyFromPropertyTable ;
          .

}
WHERE {

  $this a rdbs:EntityTable ;
         rdfs:label ?ename .

   ?oentity a rdbs:PropertyTable  ;
         rdbs:hasColumn [
              a rdbs:ForeignKeyColumn , rdbs:PrimaryKeyColumn ;
              rdbs:refersToPrimaryKey [
                 rdbs:belongsToTable $this
              ];
              rdfs:label ?groupby
         ] ;
      rdbs:hasColumn ?column.

    ?column a rdbs:Column ;
         rdfs:label ?cname;
         rdbs:hasDataType ?dt ;
         rdbs:isNullable ?nullable
    .
    OPTIONAL { $this rdbs:hasEntityLocalName ?lname.}
    OPTIONAL { ?column rdbs:hasPropertyLocalName ?plname.}

    rdbs:target sh:namespace ?namespace ; sh:prefix ?prefix.
    BIND(rdbs:mintEntityURI(?lname , ?ename , ?namespace) AS ?euri)
    BIND(rdbs:mintDTPropertyURI(?lname , ?ename ,?plname , ?cname , ?namespace) AS ?puri)

    BIND( IF(?nullable , 0, 1) AS ?min)
    BIND(BNODE() AS ?alignment)
    BIND(BNODE() AS ?topology)
    BIND( IF(BOUND(?plname),?plname , ?cname) AS ?fieldname)
    BIND( 1 AS ?max)
}""" ;
  sh:deactivated false ;
  sh:order "1"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapEntityClassifierToSubClass
  a sh:SPARQLRule ;
  rdfs:label "Map an Entity classifier to a set of owl:Class" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
  ?suburi a owl:Class , sh:NodeShape;
           rdfs:subClassOf ?euri ;
           rdfs:label ?name.
}
WHERE {

    ?pc a rdbs:EntityClassification;
           rdbs:hasClassifyingColumn ?classifier.
    ?classifier rdbs:belongsToTable $this ;
           rdbs:hasDistinctValue ?classifyingValue ;
           rdbs:hasAssociation [
            rdbs:hasValue ?classifyingValue ;
            rdbs:hasAssociatedName ?name
           ]
    .
    $this rdfs:label ?ename.
    OPTIONAL { $this rdbs:hasEntityLocalName ?lname.}
    rdbs:target sh:namespace ?namespace ; sh:prefix ?prefix.
    BIND(rdbs:mintEntityURI(?lname , ?ename , ?namespace) AS ?euri)
    BIND(rdbs:mintEntityURI(?name , ?classifyingValue , ?namespace) AS ?suburi)
  }""" ;
  sh:deactivated false ;
  sh:order "1"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapEntityTableToClass
  a sh:SPARQLRule ;
  rdfs:label "Map an Entity Table to an owl:Class" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
  ?euri a owl:Class , sh:NodeShape;
           rdfs:subClassOf owl:Thing ;
           rdfs:label ?ename ;
           rdbs:fromTable ?table.
}
WHERE {
   $this rdfs:label ?ename.
   OPTIONAL { $this rdbs:hasEntityLocalName ?lname.}
   rdbs:target sh:namespace ?namespace ; sh:prefix ?prefix.
   BIND(rdbs:mintEntityURI(?lname , ?ename , ?namespace) AS ?euri)
   BIND(  $this as ?table )
}""" ;
  sh:deactivated false ;
  sh:order "1"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapForeignKeyColumnFromPropertyTableToObjectProperty
  a sh:SPARQLRule ;
  rdfs:label "Map an Column in an Property Table to an owl:ObjectProperty" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
   ?puri a owl:ObjectProperty ;
      rdfs:label ?cname ;
      rdfs:domain ?euri ;
      rdfs:range ?turi ;
      rdbs:mapsToColumn ?column ;
      rdbs:generatedBy rdbs:MapForeignKeyColumnFromPropertyTableToObjectProperty ;
      .

  ?euri sh:property [
       a sh:PropertyShape ;
       sh:path ?puri ;
       sh:maxCount ?max ;
       sh:minCount ?min ;
       sh:class ?turi ;
       sh:node ?turi ;
       rdbs:generatedBy rdbs:MapForeignKeyColumnFromPropertyTableToObjectProperty ;
      sh:nodeKind sh:IRI ;
  ].
}
WHERE {

  $this a rdbs:EntityTable ;
         rdfs:label ?origin .
   ?pentity a rdbs:PropertyTable  ;
         rdfs:label ?relation ;
         rdbs:hasColumn ?fpk , ?column;
         .
         ?fpk a rdbs:ForeignKeyColumn , rdbs:PrimaryKeyColumn ;
              rdbs:refersToPrimaryKey [
                 rdbs:belongsToTable $this
              ];
         .
         FILTER(?fpk != ?column)

         ?column a rdbs:ForeignKeyColumn ;
             rdfs:label ?cname;
             rdbs:isNullable ?nullable;
             rdbs:refersToPrimaryKey [ rdbs:belongsToTable ?oentity];
         .
     ?oentity  rdfs:label ?oename ;
     OPTIONAL { $this rdbs:hasEntityLocalName ?lname.}
     OPTIONAL { ?oentity rdbs:hasEntityLocalName ?loname.}
     OPTIONAL { ?column rdbs:hasPropertyLocalName ?plname.}

    rdbs:target sh:namespace ?namespace ; sh:prefix ?prefix.

    BIND(rdbs:mintEntityURI(?lname , ?ename , ?namespace) AS ?euri)
    BIND(rdbs:mintEntityURI(?loname , ?oename , ?namespace) AS ?turi)
    BIND(rdbs:mintOBJPropertyURI(?lname , ?ename ,?loname , ?oename , ?plname, ?namespace) AS ?puri)

    BIND( IF(?nullable , 0, 1) AS ?min)
    BIND( 1 AS ?max)
}""" ;
  sh:deactivated false ;
  sh:order "1"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapForeignKeyColumnToObjectProperty
  a sh:SPARQLRule ;
  rdfs:label "Map an Column in an Entity Table to an owl:ObjectProperty" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
   ?puri a owl:ObjectProperty ;
      rdfs:label ?cname ;
      rdfs:domain ?euri ;
      rdfs:range ?turi ;
      rdbs:mapsToColumn ?column ;
      rdbs:generatedBy rdbs:MapForeignKeyColumnToObjectProperty ;
.

  ?euri sh:property [
       a sh:PropertyShape ;
       sh:path ?puri ;
       sh:maxCount ?max ;
       sh:minCount ?min ;
       sh:class ?turi ;
       sh:node ?turi ;
       rdbs:generatedBy rdbs:MapForeignKeyColumnToObjectProperty ;
      sh:nodeKind sh:IRI ;
  ].
}
WHERE {
  $this rdfs:label ?ename ;
      rdbs:hasColumn ?column.
    ?column a rdbs:ForeignKeyColumn ;
         rdfs:label ?cname;
         rdbs:isNullable ?nullable;
         rdbs:refersToPrimaryKey [ rdbs:belongsToTable ?oentity]
    .
  ?oentity  rdfs:label ?oename ;
     OPTIONAL { $this rdbs:hasEntityLocalName ?lname.}
     OPTIONAL { ?oentity rdbs:hasEntityLocalName ?loname.}
     OPTIONAL { ?column rdbs:hasPropertyLocalName ?plname.}

    rdbs:target sh:namespace ?namespace ; sh:prefix ?prefix.

    BIND(rdbs:mintEntityURI(?lname , ?ename , ?namespace) AS ?euri)
    BIND(rdbs:mintEntityURI(?loname , ?oename , ?namespace) AS ?turi)
    BIND(rdbs:mintOBJPropertyURI(?lname , ?ename ,?loname , ?oename , ?plname, ?namespace) AS ?puri)

    BIND( IF(?nullable , 0, 1) AS ?min)
    BIND( 1 AS ?max)
}""" ;
  sh:deactivated false ;
  sh:order "1"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapGraphColumnToConstraintMultiple
  a sh:SPARQLRule ;
  rdfs:label "Set the Class and Node constraints on Property Shapes according to whether or not there are multiple possibilities" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
	?property ?to_add_property ?to_add_object ;
		sh:minCount ?min .
}
#SELECT *
WHERE {
	{
		SELECT DISTINCT ?this ?class ?property ?name (COUNT(?object_name) AS ?count)
		WHERE {
# Get the CBE
			?this a rdbs:GraphCBE ;
				rdbs:hasColumn ?object .
# Get its class
			BIND (rdbs:mintGraphClass(?this) AS ?class )
# Find the semantic names
			?object a rdbs:ObjectColumn ;
				rdbs:hasSemanticName ?name ;
				rdbs:hasObjectSemanticName ?object_name .
# Find the property paths
			?class sh:property ?property .
			?property a sh:PropertyShape ;
				sh:path [
					a owl:ObjectProperty ;
						rdfs:label ?name 
					] .
		} GROUP BY ?property ?this ?class ?name
	}
	OPTIONAL {
# Get corresponding columns
		BIND (BNODE() AS ?to_add_object)
		BIND (sh:or AS ?to_add_property)
		FILTER (?count > 1)
	}
	OPTIONAL {
		?this rdbs:hasColumn ?object .
		?object a rdbs:ObjectColumn ;
			rdbs:hasSemanticName ?name ;
			rdbs:isNullable ?nullable .
		BIND (rdbs:mintGraphPropertyObject(?object) AS ?to_add_object)
		BIND ( IF(?nullable, 0, 1) AS ?min )
		VALUES ?to_add_property {sh:node sh:class}
		FILTER (?count = 1)
	}
	FILTER NOT EXISTS {?property sh:or ?forbidden}
	FILTER NOT EXISTS {?property sh:node ?forbidden . ?property sh:class ?forbidden}
}
""" ;
  sh:deactivated false ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapGraphColumnToConstraintOr
  a sh:SPARQLRule ;
  rdfs:label "Set the Class and Node constraints of a Property Shape in the case where they have to be listed in a SH:OR" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX sh:<http://www.w3.org/ns/shacl#>

# Build the next node
CONSTRUCT {
	?root rdf:first ?or_constraint ;
		rdf:rest ?rest .
	?or_constraint sh:class ?object ;
		sh:node ?object ;
		sh:min ?min .
}
WHERE {
	{
		SELECT ?property ?list ?last ?new_list (SAMPLE(?object_column) AS ?value) (COUNT(?object_column) AS ?count)
		WHERE {
# Get instance to add list to 
			?this a rdbs:GraphCBE .
			BIND (rdbs:mintGraphClass(?this) AS ?class )
			?class sh:property ?property .
			?property a sh:PropertyShape ;
				sh:path [
					a owl:ObjectProperty ;
					rdfs:label ?object_name 
				] .
# Find the list root that indicates the list should be updated
			?property sh:or ?list .
# Check for the last open branch of the list (root if there are none)
			OPTIONAL {
				?list rdf:rest* ?existing_last .
				FILTER NOT EXISTS {?existing_last rdf:rest ?forbidden}
			}
			BIND ( COALESCE( ?existing_last, ?list ) AS ?last )
# Get a random item from the set that is not already in the list, and the size of that set
			?this rdbs:hasColumn ?object_column .
			?object_column a rdbs:ObjectColumn ;
				rdbs:hasSemanticName ?object_name .
			BIND ( rdbs:mintGraphPropertyObject(?object_column) AS ?object )
			FILTER NOT EXISTS { ?list (rdf:first|rdf:rest)*/sh:class ?object }
		} GROUP BY ?property ?list ?last ?new_list
	}
# Create property constraint
	BIND (BNODE() AS ?or_constraint )
# Get min count
	?value rdbs:isNullable ?nullable .
	BIND ( IF(?nullable, 0, 1) AS ?min )
# Get class / node	
	BIND ( rdbs:mintGraphPropertyObject(?value) AS ?object )
# Infer the root, first value and rest value of the next node to build in our list
	BIND (?last AS ?root)
	BIND (?or_constraint  AS ?first)
	BIND ( IF (?count < 2, rdf:nil, BNODE() ) AS ?rest)
	FILTER NOT EXISTS {?list rdf:rest* rdf:nil} 
}""" ;
  sh:deactivated false ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapGraphColumnToConstraintPath
  a sh:SPARQLRule ;
  rdfs:label "Map the Foreign Keys Columns of a Property Graph CBEs to a new Path for Object Property Constraints" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
	?property a owl:ObjectProperty ;
		rdfs:label ?label ;
		rdfs:range ?range ;
		rdfs:domain ?class ;
		rdbs:mapsToColumn ?property_column .
}
WHERE {
# Get the CBEs and their columns
	?this a rdbs:GraphCBE ;
		rdbs:hasColumn ?property_column .
# Get the columns that are related to Data Properties
	?property_column a rdbs:ObjectColumn ;
# Create the URI of the Class generated by the current CBE
	BIND ( rdbs:mintGraphClass(?this) AS ?class )
# Check if the column is nullable
	?property_column rdbs:hasSemanticName ?label .
# Create the new property URI
	BIND(rdbs:mintGraphProperty(?property_column) as ?property)
# Find the domain
	BIND(rdbs:mintGraphPropertyObject(?property_column) as ?range )
# Filter existance
	FILTER NOT EXISTS { ?class sh:property/sh:path ?property  }
}""" ;
  sh:deactivated false ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapGraphColumnToDataTypeProperty
  a sh:SPARQLRule ;
  rdfs:label "Map the non Foreign Keys Columns of a Property Graph CBEs to a new Data Type Property" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
	?property a owl:DatatypeProperty ;
		rdfs:label ?label ;
		rdfs:domain ?class ;
		rdbs:mapsToColumn ?property_column .
	?class sh:property [
		a sh:PropertyShape ;
		sh:nodeKind sh:Literal ;
		sh:path ?property ;
		sh:minCount ?min
	]
}
WHERE {
# Get the CBEs and their columns
	?this a rdbs:GraphCBE ;
		rdbs:hasColumn ?property_column .
# Get the columns that are related to Data Properties
	?property_column a rdbs:DataColumn ;
# Create the URI of the Class generated by the current CBE
	BIND ( rdbs:mintGraphClass(?this) AS ?class )
# Check if the column is nullable
	?property_column rdfs:label ?label ;
		rdbs:isNullable ?nullable .
# Create the new property URI
	BIND(rdbs:mintGraphProperty(?property_column) as ?property)
# Set nullability
    BIND( IF(?nullable , 0, 1) AS ?min)
# Filter existance
	FILTER NOT EXISTS { ?class sh:property/sh:path ?property  }
}
""" ;
  sh:deactivated false ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapGraphColumnToObjectProperty
  a sh:SPARQLRule ;
  rdfs:label "Map the Foreign Keys Columns of a Property Graph CBEs to a new Object Property" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
	?class sh:property ?property_shape .
	?property_shape	a sh:PropertyShape ;
		sh:nodeKind sh:IRI ;
		sh:path ?path .
}
WHERE {
	{ 
		SELECT ?class ?path
		WHERE {
			?this a rdbs:GraphCBE ;
				rdbs:hasColumn ?object_column .
				?object_column a rdbs:ObjectColumn .
			BIND ( rdbs:mintGraphProperty(?object_column) AS ?path )
			BIND ( rdbs:mintGraphClass(?this) AS ?class )
		} GROUP BY ?class ?path
	}
	BIND (BNODE() AS ?property_shape)
	FILTER NOT EXISTS {?class sh:property/sh:path ?path}
}""" ;
  sh:deactivated false ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapGraphTableToClass
  a sh:SPARQLRule ;
  rdfs:label "Map the CBE tables of a Property Graph to a new Classe" ;
  sh:construct """PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
 ?class a owl:Class, sh:NodeShape ;
	rdfs:label ?label ;
	rdfs:subClassOf owl:Thing .
}
WHERE {
# Get the Entities that need to be represented by a class in the proxy ontology	
	?this (a | rdf:type/rdfs:subClassOf*) rdbs:GraphCBE ;
		rdfs:label ?label .
# We create an URI for our entity (either based on the semantic label of the entity, or on its label by default)
# Basing the URI on the entity label can mean reusing the entity as a class
	BIND ( rdbs:mintGraphClass(?this) AS ?class )
}
""" ;
  sh:deactivated false ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapInverseForeignKeyColumnToObjectProperty
  a sh:SPARQLRule ;
  rdfs:label "Generate the inverse property to an Entity Table, if this does not exist, to an owl:ObjectProperty" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
   ?puri a owl:ObjectProperty ;
      rdfs:label ?localTargetEntityClassName ;
      rdfs:domain ?euri ;
      rdfs:range ?turi ;
      rdbs:generatedBy rdbs:MapInverseForeignKeyColumnToObjectProperty ;
 .

  ?euri sh:property [
       a sh:PropertyShape ;
       sh:path ?puri ;
       sh:maxCount ?max ;
       sh:minCount ?min ;
       sh:class ?turi ;
       sh:node ?turi ;
       rdbs:generatedBy rdbs:MapInverseForeignKeyColumnToObjectProperty ;
      sh:nodeKind sh:IRI ;
  ].
}
WHERE {
  $this a rdbs:EntityTable ; rdfs:label ?ename .
  ?oentity  a rdbs:EntityTable ; rdfs:label ?oename ;
        rdbs:hasColumn ?column ;
  .

  ?column a rdbs:ForeignKeyColumn ;
         rdfs:label ?cname;
         rdbs:isNullable ?nullable;
         rdbs:refersToPrimaryKey [ rdbs:belongsToTable $this]
  .

 FILTER NOT EXISTS {
  ?ocolumn a rdbs:ForeignKeyColumn ;
     rdbs:belongsToTable $this ;
     rdbs:refersToPrimaryKey [ rdbs:belongsToTable ?oentity]
  .
 }

  OPTIONAL { $this rdbs:hasEntityLocalName ?lname.}
  OPTIONAL { ?oentity rdbs:hasEntityLocalName ?loname.}

  rdbs:target sh:namespace ?namespace ; sh:prefix ?prefix.

  BIND(rdbs:mintEntityURI(?lname , ?ename , ?namespace) AS ?euri)
  BIND(rdbs:mintEntityURI(?loname , ?oename , ?namespace) AS ?turi)
  BIND(rdbs:mintOBJPropertyURI(?lname , ?ename ,?loname , ?oename , ?plname, ?namespace) AS ?puri)

  BIND( IF(?nullable , 0, 1) AS ?min)
  BIND( 1 AS ?max)
}""" ;
  sh:deactivated false ;
  sh:order "1"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapManyToManyLinkToObjectProperty
  a sh:SPARQLRule ;
  rdfs:label "Map a M:N relationship to an owl:ObjectProperty" ;
  sh:construct """
           PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
           PREFIX owl: <http://www.w3.org/2002/07/owl#>
           PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
           PREFIX sh:<http://www.w3.org/ns/shacl#>
           CONSTRUCT {
              ?puri a owl:ObjectProperty ;
                 rdfs:label ?cname ;
                 rdfs:domain ?euri ;
                 rdfs:range ?turi ;
                 rdbs:generatedBy rdbs:MapManyToManyLinkToObjectProperty ;
                 .
             ?euri sh:property [
                  a sh:PropertyShape ;
                  sh:path ?puri ;
                  sh:maxCount ?max ;
                  sh:minCount ?min ;
                  sh:class ?turi ;
                  sh:node ?turi ;
                  rdbs:generatedBy rdbs:MapManyToManyLinkToObjectProperty ;
                 sh:nodeKind sh:IRI ;
             ].

             ?topology a rdbs:Topology;
                   rdbs:topic ?origin ;
                   rdbs:relation ?relation ;
                   rdbs:groupby ?groupby ;
                   rdbs:classifier ?classifier ;
                   rdbs:collect [
                     rdbs:value ?collect ;
                     rdbs:as ?relation ;
                     rdbs:classifyingValuesFrom ?ccolumn ;
                     rdbs:extendTable ?entity ;
                     rdbs:withValuesFromTable ?oentity ;
                     rdbs:property ?puri
                   ];
               rdbs:generatedBy rdbs:MapManyToManyLinkToObjectProperty ;
               .
           } WHERE {
             SELECT DISTINCT * {
              $this  a rdbs:EntityTable ; rdfs:label ?origin .
              ?oentity a ?ttype ; rdfs:label ?oename  .
              FILTER (?ttype = rdbs:EntityTable || ?ttype = rdbs:TaxonomyTable)
              ?link a rdbs:RelationshipTable; rdfs:label ?relation ; rdbs:hasColumn ?efk , ?tfk.
              FILTER(?efk != ?tfk)
              ?efk a rdbs:ForeignKeyColumn ;  rdbs:refersToPrimaryKey ?epk;  rdfs:label ?groupby.
              ?tfk a rdbs:ForeignKeyColumn  ;  rdbs:refersToPrimaryKey ?tpk ; rdfs:label ?collect.
              ?epk rdbs:belongsToTable $this.
              ?tpk rdbs:belongsToTable ?oentity.

              FILTER NOT EXISTS {
               $this rdbs:inhibitRelationTo ?oentity
              }
              OPTIONAL { $this rdbs:hasEntityLocalName ?lname.}
              OPTIONAL { ?oentity rdbs:hasEntityLocalName ?loname.}
              OPTIONAL { ?tfk rdbs:hasPropertyLocalName ?plname .}


              OPTIONAL
              {
                ?pc a rdbs:PropertyClassification;
                      rdbs:hasClassifyingTable $this ;
                      rdbs:hasClassifyingColumn ?ccolumn.
                ?ccolumn  rdbs:belongsToTable ?link ;
                         rdfs:label ?classifier .
              }

              rdbs:target sh:namespace ?namespace ; sh:prefix ?prefix.

              BIND(rdbs:mintEntityURI(?lname , ?origin , ?namespace) AS ?euri)
              BIND(rdbs:mintEntityURI(?loname , ?oename , ?namespace) AS ?turi)
              BIND(rdbs:mintOBJPropertyURI(?lname , ?origin ,?loname , ?oename , ?plname ,?namespace) AS ?puri)
              BIND( 0 AS ?min)
              BIND( 1 AS ?max)
              BIND(BNODE() AS ?topology)
              BIND($this AS ?entity)
             }
           }""" ;
  sh:deactivated false ;
  sh:order "1"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapPropertyClassifierToSubProperty
  a sh:SPARQLRule ;
  rdfs:comment "This rule not only creates the subproperties but also the CBE topology and the alignments." ;
  rdfs:label "Map a Property classifier to a sub property" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>
CONSTRUCT {
  ?alignment a rdbs:Alignment ;
      rdbs:atype \"OTP\" ;
      rdbs:topic ?origin ;
      rdbs:field ?subfield ;
      rdbs:uri ?spuri ;
      rdbs:targetClass ?turi ;
      rdbs:generatedBy  rdbs:MapPropertyClassifierToSubProperty ;
      .

  ?topology a rdbs:Topology;
        rdbs:topic ?origin ;
        rdbs:relation ?relation ;
        rdbs:groupby ?groupby ;
        rdbs:classifier ?classifier ;
        rdbs:collect [
          rdbs:value ?collect ;
          rdbs:as ?relation ;
          rdbs:classifyingValuesFrom ?ccolumn ;
          rdbs:extendTable ?entity ;
          rdbs:property ?spuri
        ] ;
        rdbs:generatedBy rdbs:MapPropertyClassifierToSubProperty ;
        .

  ?spuri a owl:ObjectProperty ;
      rdfs:label ?localSubPropertyName ;
      rdfs:domain ?euri ;
      rdfs:range ?turi ;
     rdfs:subPropertyOf ?puri ;
     rdbs:generatedBy rdbs:MapPropertyClassifierToSubProperty ;
   .

  ?euri sh:property [
       a sh:PropertyShape ;
       sh:path ?spuri ;
       sh:maxCount ?max ;
       sh:minCount ?min ;
       sh:node ?turi ;
       sh:nodeKind sh:IRI ;
       rdbs:generatedBy rdbs:MapPropertyClassifierToSubProperty ;
       ]
   .
}  WHERE {
    $this  rdfs:label ?origin .
   ?oentity a ?ttype ; rdfs:label ?oename.
   FILTER( ?ttype = rdbs:EntityTable || ?ttype = rdbs:TaxonomyTable)
   ?link a rdbs:RelationshipTable; rdfs:label ?relation ; rdbs:hasColumn ?efk , ?tfk.
   FILTER(?efk != ?tfk)
   ?efk a rdbs:ForeignKeyColumn ;  rdbs:refersToPrimaryKey ?epk;  rdfs:label ?groupby.
   ?tfk a rdbs:ForeignKeyColumn  ;  rdbs:refersToPrimaryKey ?tpk ; rdfs:label ?collect.
   ?epk rdbs:belongsToTable $this.
   ?tpk rdbs:belongsToTable ?oentity.

   FILTER NOT EXISTS {
    $this rdbs:inhibitRelationTo ?oentity
   }
   OPTIONAL { $this rdbs:hasEntityLocalName ?lname.}
   OPTIONAL { ?oentity rdbs:hasEntityLocalName ?loname.}
   OPTIONAL { ?tfk rdbs:hasPropertyLocalName ?plname. }

   rdbs:target sh:namespace ?namespace ; sh:prefix ?prefix.

   ?pc a rdbs:PropertyClassification;
           rdbs:hasClassifyingColumn ?classifyingColumn;
           .
   ?classifyingColumn rdbs:belongsToTable ?link ;
      rdfs:label ?ccolumn ;
      rdbs:hasDistinctValue ?classifyingValue ;
       rdbs:hasAssociation [
        rdbs:hasValue ?classifyingValue ;
        rdbs:hasAssociatedName ?name
       ]
      .


    BIND( CONCAT(CONCAT(?relation,\"_\"),str(?classifyingValue)) AS ?subfield)

    BIND(rdbs:mintEntityURI(?lname , ?ename , ?namespace) AS ?euri)
    BIND(rdbs:mintEntityURI(?loname , ?oename , ?namespace) AS ?turi)
    BIND(rdbs:mintOBJPropertyURI(?lname , ?ename ,?loname , ?oename , ?plname ,?namespace) AS ?puri)
    BIND(rdbs:mintOBJSubPropertyURI(?lname , ?ename ,?loname , ?oename , ?plname ,?name, ?namespace) AS ?spuri)

    BIND( 0 AS ?min)
    BIND( 1 AS ?max)
    BIND(BNODE() AS ?topology)
    BIND(BNODE() AS ?alignment)
}""" ;
  sh:deactivated false ;
  sh:order "1"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MapTaxonomyTableToClass
  a sh:SPARQLRule ;
  rdfs:label "Map an Taxonomy Table to an owl:Class subclass of skos:Concept" ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX skos:<http://www.w3.org/2004/02/skos/core#>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
  ?euri a owl:Class , sh:NodeShape;
           rdfs:subClassOf skos:Concept ;
           rdfs:label ?ename ;
           skos:prefLabel ?ename ;
           rdbs:fromTable ?table.
}
WHERE {
   $this rdfs:label ?ename.
   OPTIONAL { $this rdbs:hasEntityLocalName ?lname.}
   rdbs:target sh:namespace ?namespace ; sh:prefix ?prefix.
   BIND(rdbs:mintEntityURI(?lname , ?ename , ?namespace) AS ?euri)
   BIND(  $this as ?table )
}""" ;
  sh:deactivated false ;
  sh:order "1"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:MembershipTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that represents the Membership of an Edge or a Vertice Type to another Vertice Type from the Property Graph."@en ;
  rdfs:label "Membership Table"@en ;
  rdfs:subClassOf rdbs:GraphTable ;
.
rdbs:MembershipTypeAssociation
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Memebership Type Schema Association associates exactly one Container of Type Vertice, and exactly one Containee of Type either Vertice or Edge (see sh:xnone associated to this shape)"@en ;
  rdfs:label "Membership Type Association"@en ;
  rdfs:subClassOf rdbs:GraphSchemaTypeAssociation ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:ContainerVerticeType ;
      sh:class rdbs:VerticeType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "Container Vertice Type"@en ;
      sh:node rdbs:VerticeType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:xone (
      [
        sh:property [
            a sh:PropertyShape ;
            sh:path rdbs:ContaineeEdgeType ;
            sh:class rdbs:VerticeType ;
            sh:maxCount 1 ;
            sh:minCount 1 ;
            sh:name "Containee Edge Type {@en}" ;
            sh:node rdbs:VerticeType ;
            sh:nodeKind sh:IRI ;
          ] ;
      ]
      [
        sh:property [
            a sh:PropertyShape ;
            sh:path rdbs:ContaineeVerticeType ;
            sh:class rdbs:VerticeType ;
            sh:maxCount 1 ;
            sh:minCount 1 ;
            sh:name "Containee Vertice Type {@en}" ;
            sh:node rdbs:VerticeType ;
            sh:nodeKind sh:IRI ;
          ] ;
      ]
    ) ;
.
rdbs:MergeTable
  a sh:SPARQLRule ;
  rdfs:label "Merge a table into another." ;
  sh:construct """
PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
CONSTRUCT {
    ?topology a rdbs:Topology;
        rdbs:topic ?origin ;
        rdbs:relation ?relation ;
        rdbs:groupby ?groupby ;
        rdbs:collect [
           rdbs:value ?collect ;
           rdbs:as ?fieldname ;
           rdbs:extendTable ?entity ;
           rdbs:property ?puri ;
        ]  ;
        rdbs:generatedBy rdbs:MergeTable ;
        .
}
WHERE {
   $this a rdbs:EntityTable ;
         rdfs:label ?origin .
   ?oentity a rdbs:PropertyTable  ;
         rdfs:label ?relation ;
         rdbs:hasColumn [
              a rdbs:ForeignKeyColumn , rdbs:PrimaryKeyColumn ;
              rdbs:refersToPrimaryKey [
                 rdbs:belongsToTable $this
              ];
              rdfs:label ?groupby
         ] ;
         rdbs:hasColumn ?column .
   ?column a rdbs:Column ;
                rdfs:label ?collect;
   .
   OPTIONAL { ?column rdbs:hasPropertyLocalName ?plname.}
   BIND( IF(BOUND(?plname),?plname , ?collect) AS ?fieldname)
   BIND(BNODE() AS ?topology)
   BIND($this AS ?entity)
}""" ;
  sh:deactivated true ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:NonKeyJoinOneHop
  a sh:SPARQLRule ;
  rdfs:label "Non-key join to a foreign column which does require one intermediate topic." ;
  sh:construct """
PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>

CONSTRUCT {
    ?topology1 a owl:Thing;
        rdbs:topic ?origin ;
        rdbs:join ?join ;
        rdbs:fk ?fk ;
        rdbs:select [rdbs:value ?select];
        .
}
WHERE {
  ?a1 a rdbs:ForeignColumn ;
  rdbs:belongsToTable $this ;
  rdbs:belongsToTable/rdfs:label ?label_a ;
  rdbs:viaForeignKeyColumn ?a2 ;
  rdbs:hasForeignColumn ?b1 .
  ?b1 a rdbs:ForeignColumn ;
  rdbs:belongsToTable/rdfs:label ?label_b ;
  rdbs:viaForeignKeyColumn ?b2 ;
  rdbs:hasForeignColumn ?c1 .
  NOT EXISTS { ?c1 a rdbs:ForeignColumn . }
  ?c1 rdbs:belongsToTable/rdfs:label ?label_c .
  BIND(BNODE() AS ?topology1)
  BIND(BNODE() AS ?topology2)

}""" ;
  sh:deactivated true ;
  sh:order "1"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:ObjectColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column mapping to an Object Property of the Graph Ontology."@en ;
  rdfs:label "Object Column"@en ;
  rdfs:subClassOf rdbs:Column ;
.
rdbs:ObjectIdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the id of an Object (Vertice or Edge) of the Property Graph."@en ;
  rdfs:label "Object Id Column"@en ;
  rdfs:subClassOf rdbs:IdColumn ;
.
rdbs:ObjectTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that represents an Object (Vertice or Edge) of the Property Graph."@en ;
  rdfs:label "Object Table"@en ;
  rdfs:subClassOf rdbs:GraphTable ;
.
rdbs:ObjectTypeColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the name of the Object Types of the Property Graph."@en ;
  rdfs:label "Object Type Column"@en ;
  rdfs:subClassOf rdbs:ValueColumn ;
.
rdbs:ObjectTypeIdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the id of an Object Type of the Property Graph."@en ;
  rdfs:label "Object Type Id Column"@en ;
  rdfs:subClassOf rdbs:IdColumn ;
.
rdbs:ObjectTypeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that contains the Type of the Objects (Edges and Vertices) of the Property Graph."@en ;
  rdfs:label "Object Type Table"@en ;
  rdfs:subClassOf rdbs:TypeTable ;
.
rdbs:ObjectWithType
  a sh:SPARQLRule ;
  rdfs:comment "Creating the description of a Temporary Table containing the objects of a property graph (either its vertices or edges) and their associated classes."@en ;
  rdfs:label "ObjectWithType"@en ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
# The base node to describe topologies of temporary topics
	?topology a rdbs:Topology ;
			rdbs:hasOutput ?output ;
			rdbs:hasTopic ?origin ;
			rdbs:hasJoin ?join .
# The description of the join element of the topology
    ?join a rdbs:Join ;
			rdbs:hasTopic ?foreign_topic ;
			rdbs:hasForeignKey ?fk  ;
			rdbs:hasKind rdbs:InnerJoin ;
			rdbs:hasSelect ?select .
# The description of the select element of the join
	?select a rdbs:Select ;
			rdbs:hasValue ?selected_property_label ;
			rdbs:hasAlias ?selected_property_alias .
# The description of the table or topic resulting from the join
	?table a ?output_type ;
			rdbs:createdFrom ?topology ;
			rdfs:label ?output ;
# Adding the copies of the origin topic columns and the selected foreign topic columns
			rdbs:hasColumn ?copied_origin_column ;
			rdbs:hasColumn ?copied_foreign_column .
# Set up copies of the origin columns
	?copied_origin_column rdbs:belongsToTable ?table ;
		?origin_predicate ?origin_object .
# Set up copies of the foreign columns
	?copied_foreign_column a rdbs:ClassifyingColumn ;
		rdbs:belongsToTable ?table ;
		?foreign_predicate ?foreign_object ;
		rdfs:label ?selected_property_alias .
}
WHERE {
# Define the valid object types to match
	VALUES (?origin_type ?output_type) {
		( rdbs:EdgeTable rdbs:EdgeWithTypeTable )
		( rdbs:VerticeTable rdbs:VerticeWithTypeTable )
	}
# Get the pattern to match in order to create the new table
	?this a ?origin_type ;
		rdbs:hasColumn ?foreign_key_column .
# Create the new description table and its name as the output
	BIND(rdbs:mintGraphTemporaryDescriptionTable(?this, rdbs:ObjectWithTypeTable) AS ?output) .
	BIND(rdbs:createIRIFromString(?output, \"base\") AS ?table) .
# Filter topologies already processed
	FILTER NOT EXISTS {?table a ?output_type}
# Identify the target foreign column
	?foreign_key_column a rdbs:ObjectTypeIdColumn .
	?foreign_table a rdbs:ObjectTypeTable ;
		rdbs:hasColumn ?selected_property .
	?selected_property a rdbs:ObjectTypeColumn .
# Find the different columns of the origin topic 
	?this rdfs:label ?origin ;
		rdbs:hasColumn ?origin_column .
# Get the different objects for the predicates of our constructed nodes
	?foreign_key_column rdfs:label ?fk .
	?foreign_table rdfs:label ?foreign_topic .
	?selected_property rdfs:label ?selected_property_label .
# Get the predicates and objects of the copied columns
	?origin_column ?origin_predicate ?origin_object .
	?selected_property ?foreign_predicate ?foreign_object .
# Filter the label of the foreign column since it is renamed
	FILTER (?origin_predicate != rdbs:belongsToTable )
	FILTER (?foreign_predicate != rdbs:belongsToTable )
	FILTER (?foreign_predicate != rdfs:label )
# Create the new name of the selected property
 	BIND(CONCAT(REPLACE(?origin, \"s\", \"\"), \"Type\") AS ?selected_property_alias) .
# Create the different subject nodes for each matched Pattern
	BIND ( rdbs:mintTopologyJoin(?output) AS ?topology) .
	BIND ( rdbs:mintTopologyJoin(?output, ?foreign_topic) AS ?join) .
	BIND ( rdbs:mintTopologyJoin(?output, ?foreign_topic, ?selected_property_label, ?selected_property_alias) AS ?select) .
# Create the different columns that are copies of the origin columns
	BIND (rdbs:mintCopyOfColumn(?origin_column, ?table) AS ?copied_origin_column) .
# Create the different columns that are copies of the foreign columns
	BIND (rdbs:mintCopyOfColumn(?selected_property, ?table) AS ?copied_foreign_column) .
}""" ;
  sh:deactivated false ;
  sh:order "1"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:ObjectWithTypeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Description Table containing the Edges of the Property Graph and their associated Object Types."@en ;
  rdfs:label "Description Table containing the Objects of the Property Graph and their associated Object Types."@en ;
  rdfs:subClassOf rdbs:TemporaryTable ;
.
rdbs:OneToManyRelationship
  a sh:SPARQLRule ;
  rdfs:label "One to many relationship" ;
  sh:construct """
PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>

CONSTRUCT {
    ?topology a rdbs:Topology;
        rdbs:topic ?origin ;
        rdbs:relation ?relation ;
        rdbs:groupby ?groupby ;
        rdbs:classifier ?classifier ;
        rdbs:collect [
          rdbs:value ?collect ;
          rdbs:as ?relation ;
          rdbs:classifyingValuesFrom ?ccolumn ;
          rdbs:extendTable ?oentity
        ] ;
        rdbs:generatedBy rdbs:OneToManyRelationship ;
        .
}
WHERE {
  $this rdbs:hasColumn [
           a rdbs:ForeignKeyColumn ;
              rdbs:refersToPrimaryKey ?epk;
              rdfs:label ?groupby
         ] ,
         [
           a rdbs:PrimaryKeyColumn ;
              rdfs:label ?collect
         ];
         rdfs:label ?relation .
   ?oentity a rdbs:EntityTable  ;
         rdbs:hasColumn ?epk ;
         rdfs:label ?origin .
  FILTER NOT EXISTS {
    $this rdbs:inhibitRelationTo ?oentity
   }

  OPTIONAL
  {
    ?pc a rdbs:PropertyClassification;
           rdbs:hasClassifyingTable $this ;
           rdbs:hasClassifyingColumn ?ccolumn.
    ?ccolumn   rdbs:belongsToTable ?oentity ;
                      rdfs:label ?classifier .
  }
  BIND(BNODE() AS ?topology)
  BIND($this AS ?entity)
}""" ;
  sh:deactivated false ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:Ontology
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Ontology in the Schema of a Graph"@en ;
  rdfs:label "Ontology"@en ;
  rdfs:subClassOf rdbs:GraphSchemaType ;
.
rdbs:OntologyIdColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the id of the Ontology Type of a Membership."@en ;
  rdfs:label "Ontology Vertice Id Column"@en ;
  rdfs:subClassOf rdbs:IdColumn ;
.
rdbs:OuterJoin
  a rdbs:JoinKind ;
  rdfs:comment "A SQL Outer Join."@en ;
  rdfs:label "OuterJoin"@en ;
.
rdbs:ParameterAggregateAggregate
  a owl:DatatypeProperty ;
  rdfs:label "Aggregate Aggregate"@en ;
  rdfs:range xsd:string ;
.
rdbs:ParameterAggregateAlias
  a owl:DatatypeProperty ;
  rdfs:label "Aggregate Alias"@en ;
  rdfs:range xsd:string ;
.
rdbs:ParameterAggregateAs
  a owl:DatatypeProperty ;
  rdfs:label "Aggregate As"@en ;
  rdfs:range xsd:string ;
.
rdbs:ParameterAggregateCollect
  a owl:DatatypeProperty ;
  rdfs:label "Aggregate Collect"@en ;
  rdfs:range xsd:string ;
.
rdbs:ParameterAggregateGroupBy
  a owl:DatatypeProperty ;
  rdfs:label "Aggregate Group By"@en ;
  rdfs:range xsd:string ;
.
rdbs:ParameterAggregateTopology
  a owl:ObjectProperty ;
  rdfs:label "Aggregate Topology"@en ;
  rdfs:range rdbs:Topology ;
.
rdbs:ParameterColumn
  a owl:ObjectProperty ;
  rdfs:label "A Column "@en ;
.
rdbs:ParameterIRI
  a owl:DatatypeProperty ;
  rdfs:label "Any IRI "@en ;
  rdfs:range xsd:anyURI ;
.
rdbs:ParameterIRILocalName
  a owl:DatatypeProperty ;
  rdfs:comment "The local name (String) of an IRI, to provide to a function that mints IRIs" ;
  rdfs:label "Local Name of an IRI "@en ;
  rdfs:range xsd:string ;
.
rdbs:ParameterIRIPrefix
  a owl:DatatypeProperty ;
  rdfs:label "Prefix of an IRI "@en ;
  rdfs:range xsd:string ;
.
rdbs:ParameterIRISuffix
  a owl:DatatypeProperty ;
  rdfs:label "A Suffix to an IRI's local name"@en ;
  rdfs:range xsd:string ;
.
rdbs:ParameterInputTable
  a owl:ObjectProperty ;
  rdfs:label "An Input Table"@en ;
.
rdbs:ParameterJoinAs
  a owl:DatatypeProperty ;
  rdfs:label "Join As"@en ;
  rdfs:range xsd:string ;
.
rdbs:ParameterJoinJoin
  a owl:DatatypeProperty ;
  rdfs:label "Join Join"@en ;
  rdfs:range xsd:string ;
.
rdbs:ParameterJoinSelect
  a owl:DatatypeProperty ;
  rdfs:label "Join Select"@en ;
  rdfs:range xsd:string ;
.
rdbs:ParameterJoinTopology
  a owl:ObjectProperty ;
  rdfs:label "Join Topology"@en ;
  rdfs:range rdbs:Topology ;
.
rdbs:ParameterOutputTable
  a owl:ObjectProperty ;
  rdfs:label "An Output Table"@en ;
.
rdbs:ParameterTable
  a owl:ObjectProperty ;
  rdfs:label "A Table "@en ;
.
rdbs:PrimaryKeyColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column defined from a Primary Key Constraint that identifies a single, non-null value for any instance of the table."@en ;
  rdfs:label "Primary key column"@en ;
  rdfs:subClassOf rdbs:Column ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:refersToColumn ;
      sh:class rdbs:Column ;
    ] ;
  sh:property [
      sh:path rdbs:isNullable ;
      sh:hasValue false ;
    ] ;
.
rdbs:PropertyClassification
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "All classifying columns must belong to the same table, that table would be one part of the join."@en ;
  rdfs:label "Property classification"@en ;
  rdfs:subClassOf owl:Thing ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasClassifyingColumn ;
      sh:class rdbs:Column ;
      sh:minCount 1 ;
      sh:name "has classifying column" ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasClassifyingTable ;
      sh:class rdbs:Table ;
      sh:maxCount 2 ;
      sh:minCount 1 ;
      sh:name "has classifying table" ;
      sh:nodeKind sh:IRI ;
    ] ;
.
rdbs:PropertyTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Property table" ;
  rdfs:subClassOf rdbs:EntityRelationTable ;
.
rdbs:ProxyOntologyRulesShape
  a sh:NodeShape ;
  rdfs:label "Proxy ontology rules shape" ;
.
rdbs:ProxyTaxonomyShape
  a sh:NodeShape ;
  rdfs:label "Proxy taxonomy shape" ;
  sh:order "1"^^xsd:decimal ;
  sh:rule rdbs:MapColumnToDatatypeProperty ;
  sh:rule rdbs:MapForeignKeyColumnToObjectProperty ;
  sh:rule rdbs:MapTaxonomyTableToClass ;
  sh:targetClass rdbs:TaxonomyTable ;
.
rdbs:RelationshipTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A link table will not yield an entity in itself but will relate two other entities instead."@en ;
  rdfs:label "Link table"@en ;
  rdfs:subClassOf rdbs:EntityRelationTable ;
.
rdbs:STRING
  a rdbs:DataType ;
  rdfs:label "STRING" ;
.
rdbs:Select
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Select operation for Topologies."@en ;
  rdfs:label "Select"@en ;
  rdfs:subClassOf rdbs:TopologyOperation ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAlias ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      sh:name "has alias" ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasValue ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
    ] ;
.
rdbs:Subentity
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Implement the subentity generation in a table to implement the \"evaluation patterns in ChEMBL and RMC\"."@en ;
  rdfs:label "Subentity"@en ;
  rdfs:subClassOf owl:Thing ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasParticipatingColumn ;
      sh:class rdbs:Column ;
      sh:minCount 1 ;
      sh:name "has participating column" ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasSubentityType ;
      sh:class owl:Class ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has subentity type" ;
      sh:nodeKind sh:IRI ;
    ] ;
.
rdbs:Table
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Logical structure of an RDBMS that is an abstraction of how the data is physically stored."@en ;
  rdfs:label "Table"@en ;
  rdfs:subClassOf owl:Thing ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdfs:label ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasColumn ;
      sh:class rdbs:Column ;
      sh:minCount 1 ;
    ] ;
.
rdbs:TagGenericIdColumns
  a sh:SPARQLRule ;
  rdfs:comment "Adding their specific IdColumn Class to all Primary Keys and Foreign Keys columns that can be automatically identified"@en ;
  rdfs:label "Tag Generic Id Columns "@en ;
  sh:construct """PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
# ObjectIdColumns
	?object_id_column_pk a rdbs:ObjectIdColumn .
	?object_id_column_fk a rdbs:ObjectIdColumn .
# AttributeIdColumns
	?attribute_id_column_pk a rdbs:AttributeIdColumn .
	?attribute_id_column_fk a rdbs:AttributeIdColumn .
# ObjectTypeIdColumns
	?object_typed_id_column_pk a rdbs:ObjectTypeIdColumn .
	?object_typed_id_column_fk a rdbs:ObjectTypeIdColumn .
# AttributeTypedIdColumns
	?attribute_typed_id_column_pk a rdbs:AttributeTypeIdColumn .
	?attribute_typed_id_column_fk a rdbs:AttributeTypeIdColumn .
# DictionaryIdColumns
	?dictionary_id_column_pk a rdbs:DictionaryIdColumn .
	?dictionary_id_column_fk a rdbs:DictionaryIdColumn .
}
WHERE {
# Values
VALUES ?object_table {rdbs:EdgeTable rdbs:VerticeTable}
VALUES ?attribute_table {rdbs:EdgeAttributeTable rdbs:VerticeAttributeTable}
VALUES ?typed_attribute_value_table {rdbs:EdgeTypedAttributeValueTable rdbs:VerticeTypedAttributeValueTable}
# Primary Key Query
	?object_id_column_pk a rdbs:PrimaryKeyColumn ;
		rdbs:belongsToTable/a ?object_table .
	?attribute_id_column_pk a rdbs:PrimaryKeyColumn ;
		rdbs:belongsToTable/a ?attribute_table .
	?object_typed_id_column_pk a rdbs:PrimaryKeyColumn ;
		rdbs:belongsToTable/a rdbs:ObjectTypeTable .
	?attribute_typed_id_column_pk a rdbs:PrimaryKeyColumn ;
		rdbs:belongsToTable/a rdbs:AttributeTypeTable .
	?dictionary_id_column_pk a rdbs:PrimaryKeyColumn ;
		rdbs:belongsToTable/a rdbs:DictionaryTable .
# Foreign Key Query (restricted to our current scope of Resnet)
	?object_id_column_fk rdbs:refersToPrimaryKey ?object_id_column_pk ;
		rdbs:belongsToTable/a ?attribute_table .
	?attribute_id_column_fk rdbs:refersToPrimaryKey ?attribute_id_column_pk ;
		rdbs:belongsToTable/a ?typed_attribute_value_table .
	?object_typed_id_column_fk rdbs:refersToPrimaryKey ?object_typed_id_column_pk ;
		rdbs:belongsToTable/a ?object_table .
	?attribute_typed_id_column_fk rdbs:refersToPrimaryKey ?attribute_typed_id_column_pk ;
		rdbs:belongsToTable/a ?attribute_table .
	?dictionary_id_column_fk rdbs:refersToPrimaryKey ?dictionary_id_column_pk ;
		rdbs:belongsToTable/a ?typed_attribute_value_table .
}""" ;
  sh:deactivated false ;
  sh:order "0"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:TagRulesShape
  a sh:NodeShape ;
  rdfs:comment "Automating the tagging of database items"@en ;
  rdfs:label "Tag Rules Shape"@en ;
.
rdbs:TaxonomyTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:label "Taxonomy table" ;
  rdfs:subClassOf rdbs:EntityRelationTable ;
.
rdbs:TemporaryTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Description Table that represents an intermediary step between the raw tables of the Property Graph and the Concise Bounded Entity derived from them."@en ;
  rdfs:label "Temporary table"@en ;
  rdfs:subClassOf rdbs:GraphTable ;
.
rdbs:Topology
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Set of operations leading to the creation of a new Table."@en ;
  rdfs:label "Topology"@en ;
  rdfs:subClassOf owl:Thing ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAggregate ;
      sh:class rdbs:Aggregate ;
      sh:name "has aggregate" ;
      sh:node rdbs:Aggregate ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasJoin ;
      sh:class rdbs:Join ;
      sh:name "has join" ;
      sh:node rdbs:Join ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasOutput ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has output" ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasTopic ;
      sh:datatype xsd:string ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has topic" ;
    ] ;
.
rdbs:TopologyOperation
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Single operation that is part of a Topology."@en ;
  rdfs:label "Topology Operation"@en ;
  rdfs:subClassOf owl:Thing ;
.
rdbs:TopologyRulesShape
  a sh:NodeShape ;
  rdfs:comment """RulesShape represent shapes that only contains rules as opposed to Constraints Shapes. 
This the Topology SuperRuleShape of the Abstraction Specific Topology RulesShape
As a superShape it does not contain rules, it serve the purpose of knowledge organization.
Note there is no inferencing between nodeShape, neither instance of node shape. Should not be confused with Shacl Class which are target of shape including the implicit Shacl Class.
Hence this is purely for ontology organization purpose"""@en ;
.
rdbs:TypeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that contains the Type of an element of the Property Graph."@en ;
  rdfs:label "Type Table"@en ;
  rdfs:subClassOf rdbs:GraphTable ;
.
rdbs:TypedAttributeValueColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column containing the Attribute Values of a specific AttributeDataType."@en ;
  rdfs:label "Attribute Value Column"@en ;
  rdfs:subClassOf rdbs:ValueColumn ;
.
rdbs:TypedAttributeValuePerAttributeTypeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Typed Table containing the Attribute Values of each Attribute Type of a specific Attribute DataType."@en ;
  rdfs:label "Typed Attribute Value Per Attribute Table"@en ;
  rdfs:subClassOf rdbs:TemporaryTable ;
.
rdbs:TypedAttributeValueTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that contains the Attribute Values of a specific AttributeDataType of the Property Graph."@en ;
  rdfs:label "Typed Attribute Value Table"@en ;
  rdfs:subClassOf rdbs:GraphTable ;
.
rdbs:TypedAttributeValueWithTypeWithIdObject
  a sh:SPARQLRule ;
  rdfs:comment "Creating the description of a Temporary Table containing the attributes of a property graph, their values, their associated classes and a pointer to their associated objects."@en ;
  rdfs:label "Typed Attribute Value With Type With ID Object"@en ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
# The base node to describe topologies of temporary topics
	?topology a rdbs:Topology ;
			rdbs:hasOutput ?output ;
			rdbs:hasTopic ?origin ;
			rdbs:hasJoin ?join .
# The description of the join element of the topology
    ?join a rdbs:Join ;
			rdbs:hasTopic ?foreign_topic ;
			rdbs:hasForeignKey ?fk  ;
			rdbs:hasKind rdbs:InnerJoin ;
			rdbs:hasSelect ?object ;
			rdbs:hasSelect ?property .
# The description of the select element of the join
	?object a rdbs:Select ;
			rdbs:hasValue ?object_column_label .
	?property a rdbs:Select ;
			rdbs:hasValue ?property_column_label .
# The description of the table or topic resulting from the join
	?table a ?output_type ;
			rdbs:createdFrom ?topology ;
			rdfs:label ?output ;
# Adding the copies of the origin topic columns and the selected foreign topic columns
			rdbs:hasColumn ?copied_origin_column ;
			rdbs:hasColumn ?copied_object_column ;
			rdbs:hasColumn ?copied_property_column .
# Set up copies of the origin columns
	?copied_origin_column rdbs:belongsToTable ?table ;
		?origin_predicate ?origin_object .
# Set up copies of the foreign columns
	?copied_object_column rdbs:belongsToTable ?table ;
		?object_predicate ?object_object .
# Set up copies of the foreign columns
	?copied_property_column rdbs:belongsToTable ?table ;
		?property_predicate ?property_object .
}
WHERE {
# Define the valid object types to match
	VALUES (?origin_type ?foreign_type ?output_type) {
		( rdbs:EdgeTypedAttributeValueTable rdbs:EdgeAttributeWithTypeTable  rdbs:TypedEdgeAttributeValueWithTypeWithIdObjectTable )
		( rdbs:VerticeTypedAttributeValueTable rdbs:VerticeAttributeWithTypeTable rdbs:TypedVerticeAttributeValueWithTypeWithIdObjectTable )
	}
# Pattern to match in order to create join topology
    ?this a ?origin_type ;
		rdbs:hasColumn ?foreign_key_column .
# Create the new description table and its name as the output
	BIND(rdbs:mintGraphTemporaryDescriptionTable(?this, rdbs:TypedAttributeValueWithTypeWithIdObjectTable) AS ?output) .
	BIND(rdbs:createIRIFromString(?output, \"base\") AS ?table) .
# Filter topologies already processed
    FILTER NOT EXISTS { ?table a ?output_type }
# Identify target foreign columns
    ?foreign_key_column a rdbs:AttributeIdColumn .
	?foreign_table a ?foreign_type ;
		rdbs:hasColumn ?object_column ;
		rdbs:hasColumn ?property_column .
# Find property and object columns
	?property_column a rdbs:AttributeTypeColumn .
	?object_column a rdbs:ObjectIdColumn .
# Find the different columns of the origin topic 
	?this rdfs:label ?origin ;
		rdbs:hasColumn ?origin_column .
# Get the different objects for the predicates of our constructed nodes
	?foreign_key_column rdfs:label ?fk .
	?foreign_table rdfs:label ?foreign_topic .
	?object_column rdfs:label ?object_column_label .
	?property_column rdfs:label ?property_column_label .
# Get the predicates and objects of the copied columns
	?origin_column ?origin_predicate ?origin_object .
	?object_column ?object_predicate ?object_object .
	?property_column ?property_predicate ?property_object .
# Filter the label of the foreign column since it is renamed
	FILTER (?origin_predicate != rdbs:belongsToTable )
	FILTER (?object_predicate != rdbs:belongsToTable )
	FILTER (?property_predicate != rdbs:belongsToTable )
# Create the different subject nodes for each matched Pattern
	BIND ( rdbs:mintTopologyJoin(?output) AS ?topology) .
	BIND ( rdbs:mintTopologyJoin(?output, ?foreign_topic) AS ?join) .
	BIND ( rdbs:mintTopologyJoin(?output, ?foreign_topic, ?object_column_label) AS ?object) .
	BIND ( rdbs:mintTopologyJoin(?output, ?foreign_topic, ?property_column_label) AS ?property) .
# Create the different columns that are copies of the origin columns
	BIND (rdbs:mintCopyOfColumn(?origin_column, ?table) AS ?copied_origin_column) .
# Create the different columns that are copies of the foreign columns
	BIND (rdbs:mintCopyOfColumn(?object_column, ?table) AS ?copied_object_column) .
	BIND (rdbs:mintCopyOfColumn(?property_column, ?table) AS ?copied_property_column) .
}""" ;
  sh:deactivated false ;
  sh:order "3"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:TypedAttributeValueWithTypeWithIdObjectTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Typed Table containing the Attribute Values of a specific Attribute DataType and the Objects of the Property Graph having these Attributes and Attribute Values ."@en ;
  rdfs:label "Typed Attribute Value With Type With Id Object Table."@en ;
  rdfs:subClassOf rdbs:TemporaryTable ;
.
rdbs:TypedAttributeValueWithTypeWithIdObjectWithDictionary
  a sh:SPARQLRule ;
  rdfs:comment "Adding a dictionary value to the description of an Attribute with Type with ID Object Temporary Table containing a pointer to such values."@en ;
  rdfs:label "Typed Attribute Value With Type With ID Object With Dictionary"@en ;
  sh:construct """PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX sh:<http://www.w3.org/ns/shacl#>

CONSTRUCT {
	?join a rdbs:Join ;
			rdbs:hasTopic ?foreign_topic ;
			rdbs:hasForeignKey ?fk  ;
			rdbs:hasKind rdbs:InnerJoin ;
			rdbs:hasSelect ?select .
	?select a rdbs:Select ;
		rdbs:hasValue ?dictionary_column_label .
	?origin_topology rdbs:hasJoin ?join.
# Adding the copy of the dictionary value column
	?this rdbs:hasColumn ?copied_dictionary_column .
# Set up copies of the dictionary value column
	?copied_dictionary_column rdbs:belongsToTable ?this ;
		?dictionary_predicate ?dictionary_object ;
		rdbs:isCopyOf ?dictionary_column .
}
WHERE {
# Define the valid object types to match
	VALUES ?origin_type { rdbs:TypedEdgeAttributeValueWithTypeWithIdObjectTable rdbs:TypedVerticeAttributeValueWithTypeWithIdObjectTable }
# Match pattern to add dictionary value
	?this a ?origin_type ;
	rdfs:label ?origin_table_label ;
	rdbs:createdFrom ?origin_topology ;
	rdbs:hasColumn ?foreign_key_column .
	?foreign_key_column a rdbs:DictionaryIdColumn .
	?dictionary_table rdbs:hasColumn ?dictionary_column .
	?dictionary_column a rdbs:DictionaryValueColumn .
# Get the output of the topology
	?origin_topology rdbs:hasOutput ?output .
# Get the attached labels
	?dictionary_table rdfs:label ?foreign_topic .
	?foreign_key_column rdfs:label ?fk .
	?dictionary_column rdfs:label ?dictionary_column_label .
# Create the join with the dictionary table
	BIND ( rdbs:mintTopologyJoin(?output, ?foreign_topic) AS ?join) .
	FILTER NOT EXISTS {?origin_topology rdbs:hasJoin ?join}
# Get the predicates and objects of the copied columns
	?dictionary_column ?dictionary_predicate ?dictionary_object  .
# Filter the label of the foreign column since it is renamed
	FILTER (?dictionary_predicate != rdbs:belongsToTable )
# Create the different subject nodes for each matched Pattern
	BIND ( rdbs:mintTopologyJoin(?output, ?foreign_topic, ?dictionary_column_label) AS ?select) 
# Create the different columns that are copies of the foreign columns
	BIND (rdbs:mintCopyOfColumn(?dictionary_column, ?this) AS ?copied_dictionary_column) .
}""" ;
  sh:deactivated false ;
  sh:order "4"^^xsd:decimal ;
  sh:prefixes rdfs: ;
  sh:prefixes owl: ;
  sh:prefixes rdbs: ;
.
rdbs:TypedEdgeAttributeValuePerAttributeTypeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Typed Table containing the Attribute Values of each Edge Attribute Type of a specific Edge Attribute DataType."@en ;
  rdfs:label "Typed Edge Attribute Value Per Attribute Table"@en ;
  rdfs:subClassOf rdbs:TypedAttributeValuePerAttributeTypeTable ;
.
rdbs:TypedEdgeAttributeValueWithTypeWithIdObjectTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Typed Table containing the Attribute Values of a specific Attribute DataType and the Edges of the Property Graph having these Attributes and Attribute Values ."@en ;
  rdfs:label "Edge Attribute With Type With Id Object Table"@en ;
  rdfs:subClassOf rdbs:TypedAttributeValueWithTypeWithIdObjectTable ;
.
rdbs:TypedVerticeAttributeValueWithTypeWithIdObjectTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Typed Table containing the Attribute Values of a specific Attribute DataType and the Vertices of the Property Graph having these Attributes and Attribute Values ."@en ;
  rdfs:label "Vertice Attribute With Type With Id Object Table"@en ;
  rdfs:subClassOf rdbs:TypedAttributeValueWithTypeWithIdObjectTable ;
.
rdbs:TypedVerticeValuePerAttributeTypeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Typed Table containing the Vertice Attribute Values of each Attribute Type of a specific Vertice Attribute DataType."@en ;
  rdfs:label "Typed Vertice Attribute Value Per Attribute Table"@en ;
  rdfs:subClassOf rdbs:TypedAttributeValuePerAttributeTypeTable ;
.
rdbs:ValueColumn
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Column mapping to a value of interest for the Graph Ontology."@en ;
  rdfs:label "Value Column"@en ;
  rdfs:subClassOf rdbs:Column ;
.
rdbs:VerticeAttributeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that identify attributes in a Graph and the Graph Vertice to which the attribute belong"@en ;
  rdfs:label "Vertice Attribute Table"@en ;
  rdfs:subClassOf rdbs:AttributeTable ;
.
rdbs:VerticeAttributeTypeAssociation
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Vertice Attribute Type Schema Association associates one Vertice Attribute Type with an AttributeData"@en ;
  rdfs:label "Vertice Attribute Type Association"@en ;
  rdfs:subClassOf rdbs:GraphSchemaTypeAssociation ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAttributeDataType ;
      sh:class rdbs:AttributeDataType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has Attribute DataType"@en ;
      sh:node rdbs:AttributeDataType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAttributeType ;
      sh:class rdbs:AttributeType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has Attribute Type"@en ;
      sh:node rdbs:AttributeType ;
      sh:nodeKind sh:IRI ;
    ] ;
.
rdbs:VerticeAttributeWithTypeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Description Table containing the Attributes of the Property Graph Vertices and their associated Attribute Types."@en ;
  rdfs:label "Vertice Attribute With Type Table "@en ;
  rdfs:subClassOf rdbs:AttributeWithTypeTable ;
.
rdbs:VerticeByType
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that represents a Concise Bounded Entity of a Vertice of a given Type from the Property Graph."@en ;
  rdfs:label "Vertice By Type"@en ;
  rdfs:subClassOf rdbs:GraphCBE ;
.
rdbs:VerticeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that represents a Vertice of the Property Graph. It represents an Entity in the Property Graph Abstraction."@en ;
  rdfs:label "Entity table"@en ;
  rdfs:subClassOf rdbs:ObjectTable ;
.
rdbs:VerticeType
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Type of Vertice in the Schema of a Graph"@en ;
  rdfs:label "Vertice Type"@en ;
  rdfs:subClassOf rdbs:GraphSchemaType ;
.
rdbs:VerticeTypeAssociation
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Vertice Type Schema Association associates a Vertice Type with an Attribute Type and its AttributeDataType"@en ;
  rdfs:label "Vertice Type Association"@en ;
  rdfs:subClassOf rdbs:GraphSchemaTypeAssociation ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAttributeDataType ;
      sh:class rdbs:AttributeDataType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has Attribute Data Type {@en}" ;
      sh:node rdbs:AttributeDataType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasAttributeType ;
      sh:class rdbs:AttributeType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has Attribute Type {@en}" ;
      sh:node rdbs:AttributeType ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:property [
      a sh:PropertyShape ;
      sh:path rdbs:hasVerticeType ;
      sh:class rdbs:VerticeType ;
      sh:maxCount 1 ;
      sh:minCount 1 ;
      sh:name "has Vertice Type {@en}" ;
      sh:node rdbs:VerticeType ;
      sh:nodeKind sh:IRI ;
    ] ;
.
rdbs:VerticeTypedAttributeValueTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "A Table that contains the Attribute Values of a specific AttributeDataType of a Vertice Attribute of the Property Graph."@en ;
  rdfs:label "Vertice Typed Attribute Value Table"@en ;
  rdfs:subClassOf rdbs:TypedAttributeValueTable ;
.
rdbs:VerticeWithTypeTable
  a owl:Class ;
  a sh:NodeShape ;
  rdfs:comment "Description Table containing the Vertices of the Property Graph and their associated Object Types."@en ;
  rdfs:label "Vertice With Type Table"@en ;
  rdfs:subClassOf rdbs:ObjectWithTypeTable ;
.
rdbs:belongsToTable
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Column ;
  rdfs:range rdbs:Table ;
.
rdbs:columnNameOp4
  a owl:Property ;
.
rdbs:createIRIFromString
  a sh:SPARQLFunction ;
  rdfs:comment "Create an IRI from a given String that will be the local name, and an optional String that is a prefix (sh:prefix declared with a namespace in a sh:declare). The default prefix is \"schema\", and is replaced by the current schema namespace of the file ontology. This function will not work if the prefix is not declared with a namespace."@en ;
  rdfs:label "Create IRI from String"@en ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterIRILocalName ;
      sh:datatype xsd:string ;
      sh:description "The local name of the IRI"@en ;
      sh:name "Local Name"@en ;
      sh:order 0 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterIRIPrefix ;
      sh:datatype xsd:string ;
      sh:description "The prefix that should be used (optional is schema)"@en ;
      sh:name "Prefix"@en ;
      sh:optional true ;
      sh:order 1 ;
    ] ;
  sh:returnType xsd:anyURI ;
  sh:select """PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT ?result
WHERE {
OPTIONAL { BIND ( $ParameterIRIPrefix AS ?provided_target) }
BIND ( COALESCE ( ?provided_target, \"schema\" ) AS ?target )
# Get the entity prefix
	?ontology a owl:Ontology ;
		sh:declare [
			sh:namespace ?prefix ;
			sh:prefix ?target
		] .
	BIND(IRI(concat(str(?prefix), $ParameterIRILocalName)) AS ?result)
}""" ;
.
rdbs:createdFrom
  a owl:ObjectProperty ;
  rdfs:domain rdbs:TemporaryTable ;
  rdfs:label "created from table" ;
  rdfs:range rdbs:GraphCBE ;
  rdfs:range rdbs:TemporaryTable ;
.
rdbs:createdWith
  a owl:ObjectProperty ;
  rdfs:domain rdbs:TemporaryTable ;
  rdfs:label "created with" ;
  rdfs:range rdbs:Topology ;
.
rdbs:domainLabelOp2
  a owl:Property ;
.
rdbs:domainLocalNameOp1
  a owl:Property ;
.
rdbs:getInstanceLocalName
  a sh:SPARQLFunction ;
  rdfs:comment "Get the Local Name of an instance of the ontology."@en ;
  rdfs:label "Rule Test Shape"@en ;
  sh:parameter [
      sh:path rdbs:ParameterIRI ;
      sh:datatype xsd:anyURI ;
      sh:description "The item using desired prefix"@en ;
    ] ;
  sh:returnType xsd:string ;
  sh:select """PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT ?result
WHERE {
# Get the entity prefix
	?ontology a owl:Ontology ;
		sh:declare [
			sh:namespace ?prefix ;
			sh:prefix \"base\"
		] .
	BIND(str($ParameterIRI) AS ?str_this)
	BIND(str(?prefix) AS ?str_prefix)
	BIND(strafter(?str_this, ?str_prefix) AS ?result)
}""" ;
.
rdbs:getInstancePrefix
  a sh:SPARQLFunction ;
  rdfs:comment "Get the prefix of an instance"@en ;
  rdfs:label "Get Instance Prefix"@en ;
  sh:parameter [
      sh:path rdbs:ParameterIRI ;
      sh:datatype xsd:anyURI ;
      sh:description "The item using desired prefix"@en ;
    ] ;
  sh:returnType xsd:string ;
  sh:select """PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT ?result
WHERE {
# Get the entity prefix
	?ontology a owl:Ontology ;
		sh:declare [
			sh:namespace ?prefix ;
			sh:prefix \"base\"
		] .
	BIND(?prefix AS ?result)
}""" ;
.
rdbs:hasAggregate
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Topology ;
  rdfs:range rdbs:Aggregate ;
.
rdbs:hasAlias
  a owl:DatatypeProperty ;
  rdfs:range xsd:string ;
.
rdbs:hasAnnotationSourceType
  a owl:ObjectProperty ;
  rdfs:label "has Annotation Source Type"@en ;
  rdfs:subPropertyOf rdbs:hasParticipantType ;
.
rdbs:hasAnnotationTargetType
  a owl:ObjectProperty ;
  rdfs:label "has Annotation Target Type"@en ;
  rdfs:subPropertyOf rdbs:hasParticipantType ;
.
rdbs:hasAnnotationType
  a owl:ObjectProperty ;
  rdfs:label "has Annotation Type"@en ;
  rdfs:subPropertyOf rdbs:hasParticipantType ;
.
rdbs:hasAssociatedName
  a owl:DatatypeProperty ;
  rdfs:domain rdbs:Association ;
  rdfs:label "has associated name" ;
.
rdbs:hasAssociation
  a owl:ObjectProperty ;
  rdfs:label "has association" ;
  rdfs:range rdbs:Association ;
.
rdbs:hasAttributeDataType
  a owl:ObjectProperty ;
  rdfs:label "has Attribute DataType"@en ;
  rdfs:subPropertyOf rdbs:hasParticipantType ;
.
rdbs:hasAttributeType
  a owl:ObjectProperty ;
  rdfs:label "has Attribute Type"@en ;
  rdfs:subPropertyOf rdbs:hasParticipantType ;
.
rdbs:hasClassifier
  a owl:DatatypeProperty ;
  rdfs:domain rdbs:Collect ;
  rdfs:range xsd:string ;
.
rdbs:hasClassifyingColumn
  a owl:ObjectProperty ;
  rdfs:comment "Specify that a column is used to classify the containing table into separate entity types."@en ;
  rdfs:domain [
      a owl:Class ;
      owl:unionOf (
          rdbs:EntityClassification
          rdbs:PropertyClassification
        ) ;
    ] ;
  rdfs:label "has classifying column"@en ;
  rdfs:range rdbs:Column ;
.
rdbs:hasClassifyingTable
  a owl:ObjectProperty ;
  rdfs:domain rdbs:PropertyClassification ;
  rdfs:label "has classifying table"@en ;
  rdfs:range rdbs:Table ;
.
rdbs:hasCollect
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Aggregate ;
  rdfs:range rdbs:Collect ;
.
rdbs:hasColumn
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Table ;
  rdfs:label "has column"@en ;
  rdfs:range rdbs:Column ;
  owl:inverseOf rdbs:belongsToTable ;
.
rdbs:hasDataType
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Column ;
  rdfs:range rdbs:DataType ;
  rdfs:range [
      a owl:Restriction ;
      owl:onClass rdbs:DataType ;
      owl:onProperty rdbs:hasDataType ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
rdbs:hasDistinctValue
  a owl:DatatypeProperty ;
  rdfs:comment "Distinct value for a classifying column in a classification operation. These are collected once a column has been involved into a classification operation."@en ;
  rdfs:domain rdbs:Column ;
  rdfs:label "has distinct value"@en ;
.
rdbs:hasEdgeType
  a owl:ObjectProperty ;
  rdfs:label "Type of Edge"@en ;
.
rdbs:hasEntityLocalName
  a owl:DatatypeProperty ;
  rdfs:domain rdbs:EntityTable ;
  rdfs:label "has entity local name" ;
  rdfs:range xsd:string ;
.
rdbs:hasEntityType
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Table ;
  rdfs:label "set the type of an entity."@en ;
  rdfs:range owl:Class ;
.
rdbs:hasForeign
  a owl:DatatypeProperty ;
  rdfs:range xsd:string ;
.
rdbs:hasForeignColumn
  a owl:ObjectProperty ;
  rdfs:comment "Reference to a foreign column (i.e. a column belonging to a table not target) to import into a target table/entity."@en ;
  rdfs:domain rdbs:ForeignColumn ;
  rdfs:label "has foreign column"@en ;
  rdfs:range rdbs:Column ;
.
rdbs:hasForeignKey
  a owl:DatatypeProperty ;
  rdfs:domain rdbs:Join ;
  rdfs:range xsd:string ;
.
rdbs:hasGroupBy
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Aggregate ;
.
rdbs:hasIDColumn
  a owl:DatatypeProperty ;
  rdfs:range xsd:string ;
.
rdbs:hasIDTable
  a owl:DatatypeProperty ;
  rdfs:range xsd:string ;
.
rdbs:hasJoin
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Topology ;
  rdfs:range rdbs:Join ;
.
rdbs:hasKeyColumn
  a owl:DatatypeProperty ;
  rdfs:range xsd:string ;
.
rdbs:hasKeyTable
  a owl:DatatypeProperty ;
  rdfs:range xsd:string ;
.
rdbs:hasKind
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Join ;
  rdfs:range rdbs:JoinKind ;
.
rdbs:hasObjectSemanticName
  a owl:DatatypeProperty ;
  rdfs:label "has the semantic name of an object" ;
  rdfs:range xsd:string ;
.
rdbs:hasOntology
  a owl:ObjectProperty ;
  rdfs:label "has Ontology"@en ;
.
rdbs:hasOrder
  a owl:DatatypeProperty ;
  rdfs:domain rdbs:TopologyOperation ;
  rdfs:range xsd:integer ;
.
rdbs:hasOutput
  a owl:DatatypeProperty ;
  rdfs:domain rdbs:Topology ;
  rdfs:range xsd:string ;
.
rdbs:hasParticipantType
  a owl:ObjectProperty ;
  rdfs:label "has Participant Type"@en ;
.
rdbs:hasParticipatingColumn
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Subentity ;
  rdfs:label "has participating column"@en ;
  rdfs:range rdbs:Column ;
.
rdbs:hasProperty
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Column ;
  rdfs:label "set the property of a column."@en ;
  rdfs:range [
      a owl:Class ;
      owl:unionOf (
          owl:ObjectProperty
          owl:DatatypeProperty
        ) ;
    ] ;
.
rdbs:hasPropertyLocalName
  a owl:DatatypeProperty ;
  rdfs:label "has property local name" ;
.
rdbs:hasQuery
  a owl:DatatypeProperty ;
  rdfs:domain rdbs:ClassifyingColumn ;
  rdfs:range xsd:string ;
.
rdbs:hasSQLFrom
  a owl:ObjectProperty ;
.
rdbs:hasSQLJoin
  a owl:ObjectProperty ;
.
rdbs:hasSelect
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Join ;
  rdfs:range rdbs:Select ;
.
rdbs:hasSelectedColumn
  a owl:DatatypeProperty ;
  rdfs:range xsd:string ;
.
rdbs:hasSelectedTable
  a owl:DatatypeProperty ;
  rdfs:range xsd:string ;
.
rdbs:hasSemanticName
  a owl:DatatypeProperty ;
  rdfs:label "has a semantic name" ;
  rdfs:range xsd:string ;
.
rdbs:hasSourceTable
  a owl:ObjectProperty ;
  rdfs:label "has source table"@en ;
  rdfs:range rdbs:Table ;
.
rdbs:hasStep
  a owl:ObjectProperty ;
.
rdbs:hasSubentityType
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Subentity ;
  rdfs:label "set the type of an entity's subentity."@en ;
  rdfs:range owl:Class ;
.
rdbs:hasSuperType
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Table ;
  rdfs:label "set the super type of an entity type."@en ;
  rdfs:range owl:Class ;
.
rdbs:hasTargetTable
  a owl:ObjectProperty ;
  rdfs:domain rdbs:ForeignColumn ;
  rdfs:label "has target table"@en ;
  rdfs:range rdbs:Table ;
.
rdbs:hasTmpType
  a xsd:string ;
  rdfs:domain rdbs:Table ;
  rdfs:label "has temporary table type" ;
.
rdbs:hasTopic
  a owl:DatatypeProperty ;
  rdfs:domain rdbs:Join ;
  rdfs:domain rdbs:Topology ;
  rdfs:range xsd:string ;
.
rdbs:hasValue
  a owl:DatatypeProperty ;
  rdfs:domain rdbs:Association ;
  rdfs:domain rdbs:Collect ;
  rdfs:domain rdbs:Select ;
  rdfs:label "has value" ;
  rdfs:range xsd:string ;
.
rdbs:hasVerticeALinkType
  a owl:ObjectProperty ;
  rdfs:label "Type of the link connecting the first Vertice to an Edge "@en ;
.
rdbs:hasVerticeAType
  a owl:ObjectProperty ;
  rdfs:label "Type of the first Vertice connected to an Edge"@en ;
.
rdbs:hasVerticeBLinkType
  a owl:ObjectProperty ;
  rdfs:label "Type of the link connecting the second Vertice to an Edge "@en ;
.
rdbs:hasVerticeBType
  a owl:ObjectProperty ;
  rdfs:label "Type of the second Vertice connected to an Edge"@en ;
.
rdbs:hasVerticeType
  a owl:ObjectProperty ;
  rdfs:label "Type of Vertice"@en ;
.
rdbs:inhibitRelationTo
  a owl:ObjectProperty ;
  rdfs:comment "Used to inhibit the materialisation of relationships between the subject and the object table."@en ;
  rdfs:domain rdbs:Table ;
  rdfs:label "inhibit relation to"@en ;
  rdfs:range rdbs:Table ;
.
rdbs:isAggregateOf
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Table ;
  rdfs:range rdbs:Table ;
.
rdbs:isCopyOf
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Column ;
  rdfs:range rdbs:Column ;
.
rdbs:isNullable
  a owl:DatatypeProperty ;
  rdfs:comment "If \"true\" the column can have null values."@en ;
  rdfs:domain rdbs:Column ;
  rdfs:label "is nullable"@en ;
  rdfs:range xsd:boolean ;
.
rdbs:labelOp2
  a owl:Property ;
.
rdbs:localNameOp1
  a owl:Property ;
.
rdbs:mapsToColumn
  a owl:ObjectProperty ;
  rdfs:label "maps to column" ;
  rdfs:range rdbs:Column ;
.
rdbs:mergeToTable
  a owl:ObjectProperty ;
  rdfs:domain rdbs:Table ;
  rdfs:label "merge to table" ;
  rdfs:range rdbs:Table ;
.
rdbs:mintCopyOfColumn
  a sh:SPARQLFunction ;
  rdfs:comment "Create the IRI of a copy of a column, base on the original column."@en ;
  rdfs:label "Mint Copy of Column"@en ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterColumn ;
      sh:class rdbs:Column ;
      sh:description "The column that is copied."@en ;
      sh:name "Column Parameter"@en ;
      sh:nodeKind sh:IRI ;
      sh:order 0 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterIRISuffix ;
      sh:datatype xsd:string ;
      sh:description "An optional suffix to the column."@en ;
      sh:name "Optional Suffix"@en ;
      sh:optional true ;
      sh:order 2 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterTable ;
      sh:class rdbs:Table ;
      sh:description "The table that will receive the copy of the column."@en ;
      sh:name "Table Parameter"@en ;
      sh:nodeKind sh:IRI ;
      sh:order 1 ;
    ] ;
  sh:returnType xsd:anyURI ;
  sh:select """PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT ?result
WHERE {
# Get the prefix of the new table
	$ParameterColumn rdfs:label ?raw_column .
	OPTIONAL { $ParameterTable rdfs:label ?raw_table_label . }
	BIND ( rdbs:getInstanceLocalName($ParameterTable) AS ?raw_table_local_name )
	BIND ( COALESCE (?raw_table_label, ?raw_table_local_name) AS ?raw_table )
	BIND (REPLACE (?raw_column, \"\\\\W*\", \"_\") AS ?column)
	BIND (REPLACE (?raw_table, \"\\\\W+\", \"-\") AS ?table)
	BIND (REPLACE ($ParameterIRISuffix, \"\\\\W*\", \"_\") AS ?suffix)
	BIND (COALESCE ( CONCAT (?column, ?suffix), ?column )AS ?suffixed_column)
# Bind the class prefix and name into an URI
	BIND (rdbs:createIRIFromString( CONCAT (?table, ?suffixed_column), \"base\" ) AS ?result )
}""" ;
.
rdbs:mintDTPropertyURI
  a sh:SPARQLFunction ;
  rdfs:comment "Mint a URI for a Data Type property from its $localName and $label" ;
  sh:parameter [
      sh:path rdbs:columnNameOp4 ;
      sh:datatype xsd:string ;
      sh:description "The column name" ;
      sh:optional true ;
      sh:order 3 ;
    ] ;
  sh:parameter [
      sh:path rdbs:labelOp2 ;
      sh:datatype xsd:string ;
      sh:description "The table label" ;
      sh:optional true ;
      sh:order 1 ;
    ] ;
  sh:parameter [
      sh:path rdbs:localNameOp1 ;
      sh:datatype xsd:string ;
      sh:description "The entity local name" ;
      sh:optional true ;
      sh:order 0 ;
    ] ;
  sh:parameter [
      sh:path rdbs:namespaceOp5 ;
      sh:datatype xsd:string ;
      sh:description "The namespace" ;
      sh:optional true ;
      sh:order 4 ;
    ] ;
  sh:parameter [
      sh:path rdbs:propertyLocalNameOp3 ;
      sh:datatype xsd:string ;
      sh:description "The asserted property local name" ;
      sh:optional true ;
      sh:order 2 ;
    ] ;
  sh:returnType xsd:string ;
  sh:select """
    PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
    PREFIX sh:<http://www.w3.org/ns/shacl#>
    SELECT ?result
    WHERE {
      BIND(  IF(  BOUND($localNameOp1) , $localNameOp1, $labelOp2)  AS ?localEntityClassName)
      BIND(  IF(  BOUND($propertyLocalNameOp3) , $propertyLocalNameOp3,  CONCAT(\"has_\",  CONCAT($columnNameOp4,  CONCAT(\"_for_\",?localEntityClassName))))  AS ?localPropertyName)
      BIND(  IRI(CONCAT( STR($namespaceOp5), ?localPropertyName))  AS ?result)
    }
    """ ;
.
rdbs:mintEntityURI
  a sh:SPARQLFunction ;
  rdfs:comment "Mint an Entity Type URI from its $localName and $label" ;
  sh:parameter [
      sh:path rdbs:labelOp2 ;
      sh:datatype xsd:string ;
      sh:description "The table label" ;
      sh:order 1 ;
    ] ;
  sh:parameter [
      sh:path rdbs:localNameOp1 ;
      sh:datatype xsd:string ;
      sh:description "The table local name" ;
      sh:optional true ;
      sh:order 0 ;
    ] ;
  sh:parameter [
      sh:path rdbs:namespaceOp3 ;
      sh:datatype xsd:string ;
      sh:description "The namespace" ;
      sh:order 2 ;
    ] ;
  sh:returnType xsd:string ;
  sh:select """
    PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
    PREFIX sh:<http://www.w3.org/ns/shacl#>
    SELECT ?result
    WHERE {
      BIND(  IF(  BOUND($localNameOp1) ,
             IRI(CONCAT(STR($namespaceOp3),$localNameOp1)),
             IRI(CONCAT(STR($namespaceOp3),$labelOp2)))  AS ?result)
    }
    """ ;
.
rdbs:mintGraphCBEDescriptionTable
  a sh:SPARQLFunction ;
  rdfs:comment "Create the label of a new Description Table based on its class."@en ;
  rdfs:label "Mint Graph Description Table (CBE)"@en ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterInputTable ;
      sh:class rdbs:GraphTable ;
      sh:description "The origin table."@en ;
      sh:name "Input Table"@en ;
      sh:nodeKind sh:IRI ;
      sh:order 0 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterOutputTable ;
      sh:description "The Class of the output table."@en ;
      sh:name "Output Table"@en ;
      sh:nodeKind sh:IRI ;
      sh:order 1 ;
    ] ;
  sh:returnType xsd:anyURI ;
  sh:select """PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT ?result
WHERE {
# Get the prefix of the new table
	$ParameterInputTable rdfs:label ?origin .
	BIND (REPLACE(?origin, \"-.*\", \"\") AS ?prefix)
# Get the suffix of the new table
	VALUES (?class ?suffix) {
		(rdbs:ObjectWithTypeTable \"-with-types\")
		(rdbs:AttributeWithTypeTable \"-with-types\")
		(rdbs:AttributeWithTypeWithObjectTable \"-with-types-with-idObjects\")
		(rdbs:VerticeAggregatedAttributeTable \"-by-vertices\")
		(rdbs:EdgeAggregatedAttributeTable \"-by-edges\")
	}
	FILTER (?class = $ParameterOutputTable)
# Bind the class prefix and name into an URI
	BIND (concat(?prefix, ?suffix ) AS ?result )
}""" ;
.
rdbs:mintGraphClass
  a sh:SPARQLFunction ;
  rdfs:comment "Create an URI for a new Graph Class."@en ;
  rdfs:label "Mint Graph Class"@en ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterTable ;
      sh:class rdbs:GraphCBE ;
      sh:description "The CBE that corresponds to a Class in our Graph Ontology {@en}." ;
      sh:name "Parameter table {@en}" ;
      sh:node rdbs:GraphCBE ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:returnType xsd:anyURI ;
  sh:select """PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT ?result
WHERE {
# Get new class name (preference for semantic name, label otherwise)
	$ParameterTable rdfs:label ?label .
	OPTIONAL { $ParameterTable rdbs:hasSemanticName ?semantic_name } .
	BIND ( COALESCE (?semantic_name , ?label ) AS ?local_name ) .
# Get the entity prefix
	?ontology a owl:Ontology ;
		sh:declare [
			sh:namespace ?prefix ;
			sh:prefix \"schema\"
		] .
# Bind the class prefix and name into an URI
	BIND( IRI ( concat( str(?prefix), ?local_name ) ) AS ?result )
}""" ;
.
rdbs:mintGraphProperty
  a sh:SPARQLFunction ;
  rdfs:comment "Create an URI for a new Graph Data Property."@en ;
  rdfs:label "Mint Graph Property"@en ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterColumn ;
      sh:class rdbs:DataColumn ;
      sh:description "A Data Column which semantic name is used to create a new property."@en ;
      sh:name "Data Column"@en ;
      sh:node rdbs:DataColumn ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:returnType xsd:anyURI ;
  sh:select """PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT ?result
WHERE {
# Get new class name (preference for semantic name, label otherwise)
	$ParameterColumn rdfs:label ?label .
	OPTIONAL { $ParameterColumn rdbs:hasSemanticName ?semantic_name } .
	BIND ( COALESCE (?semantic_name , ?label ) AS ?local_name ) .
# Get the entity prefix
	?ontology a owl:Ontology ;
		sh:declare [
			sh:namespace ?prefix ;
			sh:prefix \"schema\"
		] .
# Bind the class prefix and name into an URI
	BIND( IRI ( concat( str(?prefix), ?local_name ) ) AS ?result )
}""" ;
.
rdbs:mintGraphPropertyObject
  a sh:SPARQLFunction ;
  rdfs:comment "Create an URI for a new Graph Object Property."@en ;
  rdfs:label "Mint Graph Property Object"@en ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterColumn ;
      sh:class rdbs:ObjectColumn ;
      sh:description "An Object Column which object semantic name is used to create a new property."@en ;
      sh:name "Object Column"@en ;
      sh:node rdbs:ObjectColumn ;
      sh:nodeKind sh:IRI ;
    ] ;
  sh:returnType xsd:anyURI ;
  sh:select """PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT ?result
WHERE {
# Get new class name (preference for semantic name, label otherwise)
	$ParameterColumn rdfs:label ?label .
	$ParameterColumn rdbs:hasObjectSemanticName ?semantic_name .
# Get the entity prefix
	?ontology a owl:Ontology ;
		sh:declare [
			sh:namespace ?prefix ;
			sh:prefix \"schema\"
		] .
# Bind the class prefix and name into an URI
	BIND( IRI ( concat( str(?prefix), ?semantic_name ) ) AS ?result )
}""" ;
.
rdbs:mintGraphTemporaryDescriptionTable
  a sh:SPARQLFunction ;
  rdfs:comment "Create the label of a new Description Table based on its class."@en ;
  rdfs:label "Mint Graph Description Table (Temporary Table)"@en ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterInputTable ;
      sh:class rdbs:GraphTable ;
      sh:description "The origin table."@en ;
      sh:name "Input Table"@en ;
      sh:nodeKind sh:IRI ;
      sh:order 0 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterOutputTable ;
      sh:description "The Class of the output table."@en ;
      sh:name "Output Table"@en ;
      sh:nodeKind sh:IRI ;
      sh:order 1 ;
    ] ;
  sh:returnType xsd:anyURI ;
  sh:select """PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT ?result
WHERE {
# Get the prefix of the new table
	$ParameterInputTable rdfs:label ?origin .
	BIND (REPLACE(LCASE(?origin), \"-.*\", \"\") AS ?prefix)
# Get the suffix of the new table
	VALUES (?class ?suffix) {
		(rdbs:ObjectWithTypeTable \"-with-types\")
		(rdbs:AttributeWithTypeTable \"-with-types\")
		(rdbs:TypedAttributeValueWithTypeWithIdObjectTable \"-with-types-with-idObjects\")
	}
	FILTER (?class = $ParameterOutputTable)
# Bind the class prefix and name into an URI
	BIND (concat(?prefix, ?suffix ) AS ?result )
}""" ;
.
rdbs:mintOBJPropertyURI
  a sh:SPARQLFunction ;
  rdfs:comment "Mint a URI for a Object Type property from its $localName and $label" ;
  sh:parameter [
      sh:path rdbs:domainLabelOp2 ;
      sh:datatype xsd:string ;
      sh:description "The domain table label" ;
      sh:optional true ;
      sh:order 1 ;
    ] ;
  sh:parameter [
      sh:path rdbs:domainLocalNameOp1 ;
      sh:datatype xsd:string ;
      sh:description "The domain entity local name" ;
      sh:optional true ;
      sh:order 0 ;
    ] ;
  sh:parameter [
      sh:path rdbs:namespaceOp6 ;
      sh:datatype xsd:string ;
      sh:description "The namespace" ;
      sh:optional true ;
      sh:order 5 ;
    ] ;
  sh:parameter [
      sh:path rdbs:propertyLocalNameOp5 ;
      sh:datatype xsd:string ;
      sh:description "The asserted property local name" ;
      sh:optional true ;
      sh:order 4 ;
    ] ;
  sh:parameter [
      sh:path rdbs:rangeLabelOp4 ;
      sh:datatype xsd:string ;
      sh:description "The range table label" ;
      sh:optional true ;
      sh:order 3 ;
    ] ;
  sh:parameter [
      sh:path rdbs:rangeLocalNameOp3 ;
      sh:datatype xsd:string ;
      sh:description "The range entity local name" ;
      sh:optional true ;
      sh:order 2 ;
    ] ;
  sh:returnType xsd:string ;
  sh:select """
    PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
    PREFIX sh:<http://www.w3.org/ns/shacl#>
    SELECT ?result
    WHERE {
      BIND(  IF(  BOUND($domainLocalNameOp1) , $domainLocalNameOp1, $domainLabelOp2)  AS ?domainEntityClassName)
      BIND(  IF(  BOUND($rangeLocalNameOp3) , $rangeLocalNameOp3, $rangeLabelOp4)  AS ?targetEntityClassName)

      BIND(  IF(  BOUND($propertyLocalNameOp5) , $propertyLocalNameOp5,  CONCAT(\"has_\",  CONCAT(?targetEntityClassName,  CONCAT(\"_for_\",?domainEntityClassName))))  AS ?localPropertyName)
      BIND(  IRI(CONCAT( STR($namespaceOp6), ?localPropertyName))  AS ?result)
    }
    """ ;
.
rdbs:mintOBJSubPropertyURI
  a sh:SPARQLFunction ;
  rdfs:comment "Mint a URI for a Object Type sub-property from its $localName and $label" ;
  sh:parameter [
      sh:path rdbs:domainLabelOp2 ;
      sh:datatype xsd:string ;
      sh:description "The domain table label" ;
      sh:optional true ;
      sh:order 1 ;
    ] ;
  sh:parameter [
      sh:path rdbs:domainLocalNameOp1 ;
      sh:datatype xsd:string ;
      sh:description "The domain entity local name" ;
      sh:optional true ;
      sh:order 0 ;
    ] ;
  sh:parameter [
      sh:path rdbs:modifierNameOp6 ;
      sh:datatype xsd:string ;
      sh:description "The sub-property local modifier" ;
      sh:optional true ;
      sh:order 5 ;
    ] ;
  sh:parameter [
      sh:path rdbs:namespaceOp7 ;
      sh:datatype xsd:string ;
      sh:description "The namespace" ;
      sh:optional true ;
      sh:order 6 ;
    ] ;
  sh:parameter [
      sh:path rdbs:propertyLocalNameOp5 ;
      sh:datatype xsd:string ;
      sh:description "The asserted property local name" ;
      sh:optional true ;
      sh:order 4 ;
    ] ;
  sh:parameter [
      sh:path rdbs:rangeLabelOp4 ;
      sh:datatype xsd:string ;
      sh:description "The range table label" ;
      sh:optional true ;
      sh:order 3 ;
    ] ;
  sh:parameter [
      sh:path rdbs:rangeLocalNameOp3 ;
      sh:datatype xsd:string ;
      sh:description "The range entity local name" ;
      sh:optional true ;
      sh:order 2 ;
    ] ;
  sh:returnType xsd:string ;
  sh:select """
    PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
    PREFIX sh:<http://www.w3.org/ns/shacl#>
    SELECT ?result
    WHERE {
      BIND(  IF(  BOUND($domainLocalNameOp1) , $domainLocalNameOp1, $domainLabelOp2)  AS ?domainEntityClassName)
      BIND(  IF(  BOUND($rangeLocalNameOp3) , $rangeLocalNameOp3, $rangeLabelOp4)  AS ?targetEntityClassName)
      BIND(  IF(  BOUND($propertyLocalNameOp5) , $propertyLocalNameOp5,  CONCAT(\"has_\",  CONCAT(?targetEntityClassName,  CONCAT(\"_for_\",?domainEntityClassName))))  AS ?localPropertyName)
      BIND(  CONCAT( ?localPropertyName , CONCAT( \"_\" , ?modifierNameOp6)) AS ?localSubPropertyName)
      BIND(  IRI(CONCAT( STR($namespaceOp7), ?localSubPropertyName))  AS ?result)
    }
    """ ;
.
rdbs:mintSemanticName
  a sh:SPARQLFunction ;
  rdfs:comment "Create an URI for a new Graph Property."@en ;
  rdfs:label "Mint Semantic Name"@en ;
  sh:parameter [
      sh:path rdbs:ParameterIRI ;
      sh:datatype xsd:anyURI ;
      sh:description "Any instance with a label."@en ;
    ] ;
  sh:returnType xsd:anyURI ;
  sh:select """PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT ?result
WHERE {
# Get the entity prefix
	?ontology a owl:Ontology ;
		sh:declare [
			sh:namespace ?prefix ;
			sh:prefix \"schema\"
		] .
# Bind the class prefix and name into an URI
	BIND( IRI ( concat( str(?prefix), $ParameterIRI ) ) AS ?result )
}""" ;
.
rdbs:mintTopologyAggregate
  a sh:SPARQLFunction ;
  rdfs:comment "Create an URI for a new Aggregate Topology Element."@en ;
  rdfs:label "Mint Topology Aggregate"@en ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterAggregateAggregate ;
      sh:datatype xsd:string ;
      sh:description "The Aggregate's name. {@en}" ;
      sh:name "Aggregate Aggregate {@en}" ;
      sh:optional true ;
      sh:order 1 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterAggregateAlias ;
      sh:datatype xsd:string ;
      sh:description "The alias of the Aggregate {@en}" ;
      sh:name "Aggregate Alias {@en}" ;
      sh:optional true ;
      sh:order 2 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterAggregateAs ;
      sh:datatype xsd:string ;
      sh:description "The Alias of a vallue collected by the Aggregate. {@en}" ;
      sh:name "Aggregate As {@en}" ;
      sh:optional true ;
      sh:order 5 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterAggregateCollect ;
      sh:datatype xsd:string ;
      sh:description "A collected value of the Aggregate. {@en}" ;
      sh:name "Aggregate Collect {@en}" ;
      sh:optional true ;
      sh:order 4 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterAggregateGroupBy ;
      sh:datatype xsd:string ;
      sh:description "The value on which to group the aggregated rows" ;
      sh:name "Aggregate Group By"@en ;
      sh:optional true ;
      sh:order 3 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterAggregateTopology ;
      sh:class rdbs:Topology ;
      sh:description "The Topology that represents an aggregation of a Description Table" ;
      sh:name "Aggregate Topology. {@en}" ;
      sh:node rdbs:Topology ;
      sh:nodeKind sh:IRI ;
      sh:order 0 ;
    ] ;
  sh:returnType xsd:anyURI ;
  sh:select """PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT ?result
WHERE {
	BIND (IF($ParameterAggregateAlias = \"\", \"\", CONCAT (\"-as-\", $ParameterAggregateAlias) ) AS ?optional_alias )
# Build the full local name of the object depending on the numbers of parameters
	BIND (CONCAT ($ParameterAggregateTopology,\"-topology\") AS ?length_1)
	BIND (CONCAT (?length_1, \"-aggregate\",     $ParameterAggregateAggregate) AS ?length_2)
	BIND (CONCAT (?length_2, ?optional_alias)  AS ?length_3)
	BIND (CONCAT (?length_3, \"-group-by-\",     $ParameterAggregateGroupBy) AS ?length_4)
	BIND (CONCAT (?length_4, \"-collect-\",          $ParameterAggregateCollect) AS ?length_5)
	BIND (CONCAT (?length_5, \"-as-\",                 $ParameterAggregateAs) AS ?length_6) 
	BIND ( COALESCE (?length_6, ?length_5, ?length_4, ?length_3, ?length_2, ?length_1) AS ?local_name )
# Bind the class prefix and name into an URI
	BIND( rdbs:createIRIFromString(?local_name, \"base\") AS ?result )
}""" ;
.
rdbs:mintTopologyJoin
  a sh:SPARQLFunction ;
  rdfs:comment "Create an URI for a new Join Topology Element."@en ;
  rdfs:label "Mint Topology Join"@en ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterJoinAs ;
      sh:datatype xsd:string ;
      sh:description "The alias of the value selected" ;
      sh:name "Join As {@en}" ;
      sh:optional true ;
      sh:order 3 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterJoinJoin ;
      sh:datatype xsd:string ;
      sh:description "The name of the Join. {@en}" ;
      sh:name "Join Join {@en}" ;
      sh:optional true ;
      sh:order 1 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterJoinSelect ;
      sh:datatype xsd:string ;
      sh:description "A value Selected in the Join. {@en}" ;
      sh:name "Join Select {@en}" ;
      sh:optional true ;
      sh:order 2 ;
    ] ;
  sh:parameter [
      a sh:Parameter ;
      sh:path rdbs:ParameterJoinTopology ;
      sh:class rdbs:Topology ;
      sh:description "The topology that contains the Join. {@en}" ;
      sh:name "Join Topology {@en}" ;
      sh:node rdbs:Topology ;
      sh:nodeKind sh:IRI ;
      sh:order 0 ;
    ] ;
  sh:returnType xsd:anyURI ;
  sh:select """PREFIX rdbs:<https://data.elsevier.com/lifescience/schema/rdbs/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX sh: <http://www.w3.org/ns/shacl#>

SELECT ?result
WHERE {
# Build the full local name of the object depending on the numbers of parameters
	BIND (CONCAT ($ParameterJoinTopology,\"-topology\") AS ?length_1)
	BIND (CONCAT (?length_1, \"-join-with-\", $ParameterJoinJoin) AS ?length_2)
	BIND (CONCAT (?length_2, \"-select-\",      $ParameterJoinSelect) AS ?length_3)
	BIND (CONCAT (?length_3, \"-as-\",            $ParameterJoinAs) AS ?length_4) 
	BIND ( COALESCE (?length_4, ?length_3, ?length_2, ?length_1) AS ?local_name )
# Bind the class prefix and name into an URI
	BIND( rdbs:createIRIFromString(?local_name, \"base\") AS ?result )
}""" ;
.
rdbs:modifierNameOp6
  a owl:Property ;
.
rdbs:namespaceOp3
  a owl:Property ;
.
rdbs:namespaceOp5
  a owl:Property ;
.
rdbs:namespaceOp6
  a owl:Property ;
.
rdbs:namespaceOp7
  a owl:Property ;
.
rdbs:positionInCompositeKey
  a owl:DatatypeProperty ;
  rdfs:comment "If a primary key is a composite one, this refers to the order of the column within the primary key."@en ;
  rdfs:domain rdbs:PrimaryKeyColumn ;
  rdfs:label "position in composite key"@en ;
  rdfs:range xsd:integer ;
.
rdbs:propertyLocalNameOp3
  a owl:Property ;
.
rdbs:propertyLocalNameOp5
  a owl:Property ;
.
rdbs:rangeLabelOp4
  a owl:Property ;
.
rdbs:rangeLocalNameOp3
  a owl:Property ;
.
rdbs:refersToColumn
  a owl:ObjectProperty ;
  rdfs:domain rdbs:PrimaryKeyColumn ;
  rdfs:label "refers to column"@en ;
  rdfs:range rdbs:Column ;
.
rdbs:refersToPrimaryKey
  a owl:ObjectProperty ;
  rdfs:domain rdbs:ForeignKeyColumn ;
  rdfs:label "Refers to primary key in a referenced table"@en ;
  rdfs:range rdbs:PrimaryKeyColumn ;
.
rdbs:viaForeignKeyColumn
  a owl:ObjectProperty ;
  rdfs:comment "When specifying a number of foreign columns to add to a target table, the foreign key column reference is used to specify the identity when this is ambiguous (e.g. more than one foreign key pointing to the table containing the foreign columns)."@en ;
  rdfs:domain rdbs:ForeignColumn ;
  rdfs:label "via foreign key column"@en ;
  rdfs:range rdbs:ForeignKeyColumn ;
.
